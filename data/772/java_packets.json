{
  "configuration": {
    "clientbound": [
      {
        "name": "Cookie Request (configuration)",
        "id": "0x00",
        "resource": "cookie_request",
        "notes": "Requests a cookie that was previously stored.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          }
        ]
      },
      {
        "name": "Clientbound Plugin Message (configuration)",
        "id": "0x01",
        "resource": "custom_payload",
        "notes": "Mods and plugins can use this to send their data. Minecraft itself uses several plugin channels . These internal channels are in the minecraft namespace.\n\nMore information on how it works on Dinnerbone's blog . More documentation about internal and popular registered channels are here .\n\nIn vanilla clients, the maximum data length is 1048576 bytes.",
        "fields": [
          {
            "name": "Channel",
            "type": "ns.Identifier",
            "notes": "Name of the plugin channel used to send the\ndata."
          },
          {
            "name": "Data",
            "type": "ns.ByteArray",
            "notes": "Any data. The length of this array must be inferred from the packet length."
          }
        ]
      },
      {
        "name": "Disconnect (configuration)",
        "id": "0x02",
        "resource": "disconnect",
        "notes": "",
        "fields": [
          {
            "name": "Reason",
            "type": "ns.TextComponent",
            "notes": "The reason why the player was disconnected."
          }
        ]
      },
      {
        "name": "Finish Configuration",
        "id": "0x03",
        "resource": "finish_configuration",
        "notes": "Sent by the server to notify the client that the configuration process has finished. The client answers with Acknowledge Finish Configuration whenever it is ready\nto continue.\n\nThis packet switches the connection state to play .",
        "fields": []
      },
      {
        "name": "Clientbound Keep Alive (configuration)",
        "id": "0x04",
        "resource": "keep_alive",
        "notes": "The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same payload (see Serverbound Keep Alive ). If\nthe client does not respond to a Keep Alive packet within 15 seconds after it was sent, the server kicks the client. Vice versa, if the server does not send any keep-alives for 20 seconds, the client will\ndisconnect and yields a \"Timed out\" exception.\n\nThe vanilla server uses a system-dependent time in milliseconds to generate the keep alive ID value.",
        "fields": [
          {
            "name": "Keep Alive ID",
            "type": "ns.Long",
            "notes": ""
          }
        ]
      },
      {
        "name": "Ping (configuration)",
        "id": "0x05",
        "resource": "ping",
        "notes": "Packet is not used by the vanilla server. When sent to the client, client responds with a Pong packet with the same id.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.Int",
            "notes": ""
          }
        ]
      },
      {
        "name": "Reset Chat",
        "id": "0x06",
        "resource": "reset_chat",
        "notes": "",
        "fields": []
      },
      {
        "name": "Registry Data",
        "id": "0x07",
        "resource": "registry_data",
        "notes": "Represents certain registries that are sent from the server and are applied on the client.\n\nSee Registry Data for details.",
        "fields": [
          {
            "name": "Registry ID",
            "type": "ns.Identifier",
            "notes": ""
          },
          {
            "name": "Data",
            "type": "ns.PrefixedOptional[ns.NBT]",
            "notes": "Entry data."
          }
        ]
      },
      {
        "name": "Remove Resource Pack (configuration)",
        "id": "0x08",
        "resource": "resource_pack_pop",
        "notes": "",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.PrefixedOptional[ns.UUID]",
            "notes": "The UUID of the resource pack to be removed. If not present every resource pack will be removed."
          }
        ]
      },
      {
        "name": "Add Resource Pack (configuration)",
        "id": "0x09",
        "resource": "resource_pack_push",
        "notes": "",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.UUID",
            "notes": "The unique identifier of the resource pack."
          },
          {
            "name": "URL",
            "type": "ns.String",
            "notes": "The URL to the resource pack."
          },
          {
            "name": "Hash",
            "type": "ns.String",
            "notes": "A 40 character hexadecimal, case-insensitive SHA-1 hash of the resource pack file. If it's not a 40\ncharacter hexadecimal string, the client will not use it for hash verification and likely waste bandwidth."
          },
          {
            "name": "Forced",
            "type": "ns.Boolean",
            "notes": "The vanilla client will be forced to use the resource pack from the server. If they decline they will be kicked from the server."
          },
          {
            "name": "Prompt Message",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": "This is shown in the prompt making the client accept or decline the resource pack (only if present)."
          }
        ]
      },
      {
        "name": "Store Cookie (configuration)",
        "id": "0x0A",
        "resource": "store_cookie",
        "notes": "Stores some arbitrary data on the client, which persists between server transfers. The vanilla client only accepts cookies of up to 5 kiB in size.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          },
          {
            "name": "Payload",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "The data of the cookie."
          }
        ]
      },
      {
        "name": "Transfer (configuration)",
        "id": "0x0B",
        "resource": "transfer",
        "notes": "Notifies the client that it should transfer to the given server. Cookies previously stored are preserved between server transfers.",
        "fields": [
          {
            "name": "Host",
            "type": "ns.String",
            "notes": "The hostname or IP of the server."
          },
          {
            "name": "Port",
            "type": "ns.VarInt",
            "notes": "The port of the server."
          }
        ]
      },
      {
        "name": "Feature Flags",
        "id": "0x0C",
        "resource": "update_enabled_features",
        "notes": "Used to enable and disable features, generally experimental ones, on the client.\n\nThere is one special feature flag, which is in most versions:",
        "fields": [
          {
            "name": "Feature Flags",
            "type": "ns.PrefixedArray[ns.Identifier]",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Tags (configuration)",
        "id": "0x0D",
        "resource": "update_tags",
        "notes": "Tag arrays look like:",
        "fields": [
          {
            "name": "Array of tags",
            "type": "ns.PrefixedArray[struct { Registry ns.Identifier; ArrayOfTag ns.Unknown // FIXME: See below }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Clientbound Known Packs",
        "id": "0x0E",
        "resource": "select_known_packs",
        "notes": "Informs the client of which data packs are present on the server. The client is expected to respond with its own Serverbound Known Packs packet. The vanilla server does not\ncontinue with Configuration until it receives a response.\n\nThe vanilla client requires the minecraft:core pack with version 1.21.8 for a normal login sequence. This packet must be sent before the Registry Data packets.",
        "fields": [
          {
            "name": "Known Packs",
            "type": "ns.PrefixedArray[struct { Namespace ns.String; Id ns.String; Version ns.String }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Custom Report Details (configuration)",
        "id": "0x0F",
        "resource": "custom_report_details",
        "notes": "Contains a list of key-value text entries that are included in any crash or disconnection report generated during connection to the server.",
        "fields": [
          {
            "name": "Details",
            "type": "ns.PrefixedArray[struct { Title ns.String; Description ns.String }]",
            "notes": "Prefixed Array (32)"
          }
        ]
      },
      {
        "name": "Server Links (configuration)",
        "id": "0x10",
        "resource": "server_links",
        "notes": "This packet contains a list of links that the vanilla client will display in the menu available from the pause menu. Link labels can be built-in or custom (i.e., any text).",
        "fields": [
          {
            "name": "Links",
            "type": "ns.PrefixedArray[struct { Label ns.Or[ns.VarInt, ns.TextComponent]; Url ns.String }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Clear Dialog (configuration)",
        "id": "0x11",
        "resource": "clear_dialog",
        "notes": "If we're currently in a dialog screen, then this removes the current screen and switches back to the previous one.",
        "fields": []
      },
      {
        "name": "Show Dialog (configuration)",
        "id": "0x12",
        "resource": "show_dialog",
        "notes": "Show a custom dialog screen to the client.",
        "fields": [
          {
            "name": "Dialog",
            "type": "ns.NBT",
            "notes": "Inline definition as described at Registry_data#Dialog ."
          }
        ]
      }
    ],
    "serverbound": [
      {
        "name": "Client Information (configuration)",
        "id": "0x00",
        "resource": "client_information",
        "notes": "Sent when the player connects, or when settings are changed.\n\nDisplayed Skin Parts flags:",
        "fields": [
          {
            "name": "Locale",
            "type": "ns.String",
            "notes": "e.g. en_GB ."
          },
          {
            "name": "View Distance",
            "type": "ns.Byte",
            "notes": "Client-side render distance, in chunks."
          },
          {
            "name": "Chat Mode",
            "type": "ns.VarInt",
            "notes": "0: enabled, 1: commands only, 2: hidden. See Chat#Client chat mode for more information."
          },
          {
            "name": "Chat Colors",
            "type": "ns.Boolean",
            "notes": "\u201cColors\u201d multiplayer setting. The vanilla server stores this value but does nothing with it (see MC-64867 ). Third-party servers such as Hypixel disable all coloring in\nchat and system messages when it is false."
          },
          {
            "name": "Displayed Skin Parts",
            "type": "ns.UnsignedByte",
            "notes": "Bit mask, see below."
          },
          {
            "name": "Main Hand",
            "type": "ns.VarInt",
            "notes": "0: Left, 1: Right."
          },
          {
            "name": "Enable text filtering",
            "type": "ns.Boolean",
            "notes": "Enables filtering of text on signs and written book titles. The vanilla client sets this according to the profanityFilterPreferences.profanityFilterOn account attribute indicated by the /player/attributes Mojang API endpoint . In offline mode it is always false."
          },
          {
            "name": "Allow server listings",
            "type": "ns.Boolean",
            "notes": "Servers usually list online players, this option should let you not show up in that list."
          },
          {
            "name": "Particle Status",
            "type": "ns.VarInt",
            "notes": "0: all, 1: decreased, 2: minimal"
          }
        ]
      },
      {
        "name": "Cookie Response (configuration)",
        "id": "0x01",
        "resource": "cookie_response",
        "notes": "Response to a Cookie Request (configuration) from the server. The vanilla server only accepts responses of up to 5 kiB in size.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          },
          {
            "name": "Payload",
            "type": "ns.PrefixedOptional[ns.PrefixedArray[ns.Byte]]",
            "notes": "The data of the cookie."
          }
        ]
      },
      {
        "name": "Serverbound Plugin Message (configuration)",
        "id": "0x02",
        "resource": "custom_payload",
        "notes": "Mods and plugins can use this to send their data. Minecraft itself uses some plugin channels . These internal channels are in the minecraft namespace.\n\nMore documentation on this: https://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/\n\nNote that the length of Data is known only from the packet length, since the packet has no length field of any kind.\n\nIn vanilla server, the maximum data length is 32767 bytes.",
        "fields": [
          {
            "name": "Channel",
            "type": "ns.Identifier",
            "notes": "Name of the plugin channel used to send the\ndata."
          },
          {
            "name": "Data",
            "type": "ns.ByteArray",
            "notes": "Any data, depending on the channel. minecraft: channels are documented here . The length of this array must be inferred\nfrom the packet length."
          }
        ]
      },
      {
        "name": "Acknowledge Finish Configuration",
        "id": "0x03",
        "resource": "finish_configuration",
        "notes": "Sent by the client to notify the server that the configuration process has finished. It is sent in response to the server's Finish Configuration .\n\nThis packet switches the connection state to play .",
        "fields": []
      },
      {
        "name": "Serverbound Keep Alive (configuration)",
        "id": "0x04",
        "resource": "keep_alive",
        "notes": "The server will frequently send out a keep-alive (see Clientbound Keep Alive ), each containing a random ID. The client must respond with the same packet.",
        "fields": [
          {
            "name": "Keep Alive ID",
            "type": "ns.Long",
            "notes": ""
          }
        ]
      },
      {
        "name": "Pong (configuration)",
        "id": "0x05",
        "resource": "pong",
        "notes": "Response to the clientbound packet ( Ping ) with the same id.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.Int",
            "notes": ""
          }
        ]
      },
      {
        "name": "Resource Pack Response (configuration)",
        "id": "0x06",
        "resource": "resource_pack",
        "notes": "Result can be one of the following values:",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.UUID",
            "notes": "The unique identifier of the resource pack received in the Add Resource Pack (configuration) request."
          },
          {
            "name": "Result",
            "type": "ns.VarInt",
            "notes": "Result ID (see below)."
          }
        ]
      },
      {
        "name": "Serverbound Known Packs",
        "id": "0x07",
        "resource": "select_known_packs",
        "notes": "Informs the server of which data packs are present on the client. The client sends this in response to Clientbound Known Packs .\n\nIf the client specifies a pack in this packet, the server should omit its contained data from the Registry Data packet.",
        "fields": [
          {
            "name": "Known Packs",
            "type": "ns.PrefixedArray[struct { Namespace ns.String; Id ns.String; Version ns.String }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Custom Click Action (configuration)",
        "id": "0x08",
        "resource": "custom_click_action",
        "notes": "Sent when the client clicks a Text Component with the minecraft:custom click action. This is meant as an alternative to running a command, but will not have any\neffect on vanilla servers.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.Identifier",
            "notes": "The identifier for the click action."
          },
          {
            "name": "Payload",
            "type": "ns.NBT",
            "notes": "The data to send with the click action. May be a TAG_END (0)."
          }
        ]
      }
    ]
  },
  "handshaking": {
    "clientbound": [],
    "serverbound": [
      {
        "name": "Handshake",
        "id": "0x00",
        "resource": "intention",
        "notes": "This packet causes the server to switch into the target state. It should be sent right after opening the TCP connection to prevent the server from disconnecting.",
        "fields": [
          {
            "name": "Protocol Version",
            "type": "ns.VarInt",
            "notes": "See protocol version numbers (currently 772 in\nMinecraft 1.21.8)."
          },
          {
            "name": "Server Address",
            "type": "ns.String",
            "notes": "Hostname or IP, e.g. localhost or 127.0.0.1, that was used to connect. The vanilla server does not use this information. Note that SRV records are a simple redirect, e.g. if\n_minecraft._tcp.example.com points to mc.example.org, users connecting to example.com will provide example.org as server address in addition to connecting to it."
          },
          {
            "name": "Server Port",
            "type": "ns.UnsignedShort",
            "notes": "Default is 25565. The vanilla server does not use this information."
          },
          {
            "name": "Intent",
            "type": "ns.VarInt",
            "notes": "1 for Status , 2 for Login , 3 for Transfer ."
          }
        ]
      }
    ]
  },
  "login": {
    "clientbound": [
      {
        "name": "Disconnect (login)",
        "id": "0x00",
        "resource": "login_disconnect",
        "notes": "",
        "fields": [
          {
            "name": "Reason",
            "type": "ns.JSONTextComponent",
            "notes": "The reason why the player was disconnected."
          }
        ]
      },
      {
        "name": "Encryption Request",
        "id": "0x01",
        "resource": "hello",
        "notes": "See protocol encryption for details.",
        "fields": [
          {
            "name": "Server ID",
            "type": "ns.String",
            "notes": "Always empty when sent by the vanilla server."
          },
          {
            "name": "Public Key",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "The server's public key, in bytes."
          },
          {
            "name": "Verify Token",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "A sequence of random bytes generated by the server."
          },
          {
            "name": "Should authenticate",
            "type": "ns.Boolean",
            "notes": "Whether the client should attempt to authenticate through mojang servers ."
          }
        ]
      },
      {
        "name": "Login Success",
        "id": "0x02",
        "resource": "login_finished",
        "notes": "The Property field looks like response of Mojang API#UUID to Profile and Skin/Cape , except using the protocol format instead of JSON. That is, each player will usually have one property with Name being \u201ctextures\u201d and Value being a base64-encoded JSON string, as documented at Mojang API#UUID to Profile and Skin/Cape . An empty properties array is also acceptable, and will cause clients to display the player with one of the two default skins depending their UUID (again, see the Mojang API page).",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.UUID",
            "notes": ""
          },
          {
            "name": "Username",
            "type": "ns.String",
            "notes": ""
          },
          {
            "name": "Value",
            "type": "ns.String",
            "notes": ""
          },
          {
            "name": "Signature",
            "type": "ns.PrefixedOptional[ns.String]",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Compression",
        "id": "0x03",
        "resource": "login_compression",
        "notes": "Enables compression. If compression is enabled, all following packets are encoded in the compressed packet format . Negative values will disable compression, meaning the packet\nformat should remain in the uncompressed packet format . However, this packet is entirely optional, and if not sent, compression will also not be enabled (the vanilla server does\nnot send the packet when compression is disabled).",
        "fields": [
          {
            "name": "Threshold",
            "type": "ns.VarInt",
            "notes": "Maximum size of a packet before it is compressed."
          }
        ]
      },
      {
        "name": "Login Plugin Request",
        "id": "0x04",
        "resource": "custom_query",
        "notes": "Used to implement a custom handshaking flow together with Login Plugin Response .\n\nUnlike plugin messages in \"play\" mode, these messages follow a lock-step request/response scheme, where the client is expected to respond to a request indicating whether it understood. The vanilla client always\nresponds that it hasn't understood, and sends an empty payload.",
        "fields": [
          {
            "name": "Message ID",
            "type": "ns.VarInt",
            "notes": "Generated by the server - should be unique to the connection."
          },
          {
            "name": "Channel",
            "type": "ns.Identifier",
            "notes": "Name of the plugin channel used to send the\ndata."
          },
          {
            "name": "Data",
            "type": "ns.ByteArray",
            "notes": "Any data, depending on the channel. The length of this array must be inferred from the packet length."
          }
        ]
      },
      {
        "name": "Cookie Request (login)",
        "id": "0x05",
        "resource": "cookie_request",
        "notes": "Requests a cookie that was previously stored.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          }
        ]
      }
    ],
    "serverbound": [
      {
        "name": "Login Start",
        "id": "0x00",
        "resource": "hello",
        "notes": "",
        "fields": [
          {
            "name": "Name",
            "type": "ns.String",
            "notes": "Player's Username."
          },
          {
            "name": "Player UUID",
            "type": "ns.UUID",
            "notes": "The UUID of the player logging in. Unused by the vanilla server."
          }
        ]
      },
      {
        "name": "Encryption Response",
        "id": "0x01",
        "resource": "key",
        "notes": "See protocol encryption for details.",
        "fields": [
          {
            "name": "Shared Secret",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "Shared Secret value, encrypted with the server's public key."
          },
          {
            "name": "Verify Token",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "Verify Token value, encrypted with the same public key as the shared secret."
          }
        ]
      },
      {
        "name": "Login Plugin Response",
        "id": "0x02",
        "resource": "custom_query_answer",
        "notes": "",
        "fields": [
          {
            "name": "Message ID",
            "type": "ns.VarInt",
            "notes": "Should match ID from server."
          },
          {
            "name": "Data",
            "type": "ns.PrefixedOptional[ns.ByteArray]",
            "notes": "Any data, depending on the channel. The length of this array must be inferred from the packet length. Only present if the client understood the request."
          }
        ]
      },
      {
        "name": "Login Acknowledged",
        "id": "0x03",
        "resource": "login_acknowledged",
        "notes": "Acknowledgement to the Login Success packet sent by the server.\n\nThis packet switches the connection state to configuration .",
        "fields": []
      },
      {
        "name": "Cookie Response (login)",
        "id": "0x04",
        "resource": "cookie_response",
        "notes": "Response to a Cookie Request (login) from the server. The vanilla server only accepts responses of up to 5 kiB in size.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          },
          {
            "name": "Payload",
            "type": "ns.PrefixedOptional[ns.PrefixedArray[ns.Byte]]",
            "notes": "The data of the cookie."
          }
        ]
      }
    ]
  },
  "play": {
    "clientbound": [
      {
        "name": "Bundle Delimiter",
        "id": "0x00",
        "resource": "bundle_delimiter",
        "notes": "The delimiter for a bundle of packets. When received, the client should store every subsequent packet it receives, and wait until another delimiter is received. Once that happens, the client is guaranteed to\nprocess every packet in the bundle on the same tick, and the client should stop storing packets.\n\nAs of 1.20.6, the vanilla server only uses this to ensure Spawn Entity and associated packets used to configure the entity happen on the same tick. Each entity gets a separate bundle.\n\nThe vanilla client doesn't allow more than 4096 packets in the same bundle.",
        "fields": []
      },
      {
        "name": "Spawn Entity",
        "id": "0x01",
        "resource": "add_entity",
        "notes": "Sent by the server when an entity (aside from Experience Orb ) is created.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "A unique integer ID mostly used in the protocol to identify the entity."
          },
          {
            "name": "Entity UUID",
            "type": "ns.UUID",
            "notes": "A unique identifier that is mostly used in persistence and places where the uniqueness matters more."
          },
          {
            "name": "Type",
            "type": "ns.VarInt",
            "notes": "ID in the minecraft:entity_type registry (see \"type\" field in Entity metadata#Entities )."
          },
          {
            "name": "X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Pitch",
            "type": "ns.Angle",
            "notes": "To get the real pitch, you must divide this by (256.0F / 360.0F)"
          },
          {
            "name": "Yaw",
            "type": "ns.Angle",
            "notes": "To get the real yaw, you must divide this by (256.0F / 360.0F)"
          },
          {
            "name": "Head Yaw",
            "type": "ns.Angle",
            "notes": "Only used by living entities, where the head of the entity may differ from the general body rotation."
          },
          {
            "name": "Data",
            "type": "ns.VarInt",
            "notes": "Meaning dependent on the value of the Type field, see Object Data for details."
          },
          {
            "name": "Velocity X",
            "type": "ns.Short",
            "notes": "Same units as Set Entity Velocity ."
          }
        ]
      },
      {
        "name": "Entity Animation",
        "id": "0x02",
        "resource": "animate",
        "notes": "Sent whenever an entity should change animation.\n\nAnimation can be one of the following values:",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "Player ID."
          },
          {
            "name": "Animation",
            "type": "ns.UnsignedByte",
            "notes": "Animation ID (see below)."
          }
        ]
      },
      {
        "name": "Award Statistics",
        "id": "0x03",
        "resource": "award_stats",
        "notes": "Sent as a response to Client Status (id 1). Will only send the changed values if previously requested.\n\nCategories (these are namespaced, but with : replaced with . ):",
        "fields": [
          {
            "name": "Statistics",
            "type": "ns.PrefixedArray[struct { CategoryId ns.VarInt; StatisticId ns.VarInt; Value ns.VarInt }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Acknowledge Block Change",
        "id": "0x04",
        "resource": "block_changed_ack",
        "notes": "Acknowledges a user-initiated block change. After receiving this packet, the client will display the block state sent by the server instead of the one predicted by the client.",
        "fields": [
          {
            "name": "Sequence ID",
            "type": "ns.VarInt",
            "notes": "Represents the sequence to acknowledge, this is used for properly syncing block changes to the client after interactions."
          }
        ]
      },
      {
        "name": "Set Block Destroy Stage",
        "id": "0x05",
        "resource": "block_destruction",
        "notes": "0\u20139 are the displayable destroy stages and each other number means that there is no animation on this coordinate.\n\nBlock break animations can still be applied on air; the animation will remain visible although there is no block being broken. However, if this is applied to a transparent block, odd graphical effects may happen,\nincluding water losing its transparency. (An effect similar to this can be seen in normal gameplay when breaking ice blocks)\n\nIf you need to display several break animations at the same time you have to give each of them a unique Entity ID. The entity ID does not need to correspond to an actual entity on the client. It is valid to use a\nrandomly generated number.\n\nWhen removing break animation, you must use the ID of the entity that set it.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "The ID of the entity breaking the block."
          },
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block Position."
          },
          {
            "name": "Destroy Stage",
            "type": "ns.UnsignedByte",
            "notes": "0\u20139 to set it, any other value to remove it."
          }
        ]
      },
      {
        "name": "Block Entity Data",
        "id": "0x06",
        "resource": "block_entity_data",
        "notes": "Sets the block entity associated with the block at the given location.",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": ""
          },
          {
            "name": "Type",
            "type": "ns.VarInt",
            "notes": "ID in the minecraft:block_entity_type registry"
          },
          {
            "name": "NBT Data",
            "type": "ns.NBT",
            "notes": "Data to set."
          }
        ]
      },
      {
        "name": "Block Action",
        "id": "0x07",
        "resource": "block_event",
        "notes": "",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block coordinates."
          },
          {
            "name": "Action ID (Byte 1)",
            "type": "ns.UnsignedByte",
            "notes": "Varies depending on block \u2014 see Block Actions ."
          },
          {
            "name": "Action Parameter (Byte 2)",
            "type": "ns.UnsignedByte",
            "notes": "Varies depending on block \u2014 see Block Actions ."
          },
          {
            "name": "Block Type",
            "type": "ns.VarInt",
            "notes": "ID in the minecraft:block registry. This value is unused by the vanilla client, as it will infer the type of block based on the given position."
          }
        ]
      },
      {
        "name": "Block Update",
        "id": "0x08",
        "resource": "block_update",
        "notes": "",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block Coordinates."
          },
          {
            "name": "Block ID",
            "type": "ns.VarInt",
            "notes": "The new block state ID for the block as given in the block state registry ."
          }
        ]
      },
      {
        "name": "Boss Bar",
        "id": "0x09",
        "resource": "boss_event",
        "notes": "",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.UUID",
            "notes": "Unique ID for this bar."
          },
          {
            "name": "Action",
            "type": "ns.VarInt",
            "notes": "Determines the layout of the remaining packet."
          },
          {
            "name": "Health",
            "type": "ns.Float",
            "notes": "From 0 to 1. Values greater than 1 do not crash a vanilla client, and start rendering part of a second health bar at around 1.5."
          },
          {
            "name": "Color",
            "type": "ns.VarInt",
            "notes": "Color ID (see below)."
          },
          {
            "name": "Division",
            "type": "ns.VarInt",
            "notes": "Type of division (see below)."
          },
          {
            "name": "Flags",
            "type": "ns.UnsignedByte",
            "notes": "Bit mask. 0x01: should darken sky, 0x02: is dragon bar (used to play end music), 0x04: create fog (previously was also controlled by 0x02)."
          },
          {
            "name": "Dividers",
            "type": "ns.VarInt",
            "notes": "as above"
          }
        ]
      },
      {
        "name": "Change Difficulty",
        "id": "0x0A",
        "resource": "change_difficulty",
        "notes": "Changes the difficulty setting in the client's option menu",
        "fields": [
          {
            "name": "Difficulty",
            "type": "ns.UnsignedByte",
            "notes": "0: peaceful, 1: easy, 2: normal, 3: hard."
          },
          {
            "name": "Difficulty locked?",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Chunk Batch Finished",
        "id": "0x0B",
        "resource": "chunk_batch_finished",
        "notes": "Marks the end of a chunk batch. The vanilla client marks the time it receives this packet and calculates the elapsed duration since the beginning of the chunk batch . The server\nuses this duration and the batch size received in this packet to estimate the number of milliseconds elapsed per chunk received. This value is then used to calculate the desired number of chunks per tick through\nthe formula 25 / millisPerChunk , which is reported to the server through Chunk Batch Received . This likely uses 25 instead of the normal tick duration\nof 50 so chunk processing will only use half of the client's and network's bandwidth.\n\nThe vanilla client uses the samples from the latest 15 batches to estimate the milliseconds per chunk number.",
        "fields": [
          {
            "name": "Batch size",
            "type": "ns.VarInt",
            "notes": "Number of chunks."
          }
        ]
      },
      {
        "name": "Chunk Batch Start",
        "id": "0x0C",
        "resource": "chunk_batch_start",
        "notes": "Marks the start of a chunk batch. The vanilla client marks and stores the time it receives this packet.",
        "fields": []
      },
      {
        "name": "Chunk Biomes",
        "id": "0x0D",
        "resource": "chunks_biomes",
        "notes": "Note: The order of X and Z is inverted, because the client reads them as one big-endian Long , with Z being the upper 32 bits.",
        "fields": [
          {
            "name": "Chunk biome data",
            "type": "ns.PrefixedArray[struct { ChunkZ ns.Int; ChunkX ns.Int; Data ns.PrefixedArray[ns.Byte] }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Clear Titles",
        "id": "0x0E",
        "resource": "clear_titles",
        "notes": "Clear the client's current title information, with the option to also reset it.",
        "fields": [
          {
            "name": "Reset",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Command Suggestions Response",
        "id": "0x0F",
        "resource": "command_suggestions",
        "notes": "The server responds with a list of auto-completions of the last word sent to it. In the case of regular chat, this is a player username. Command names and parameters are also supported. The client sorts these\nalphabetically before listing them.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.VarInt",
            "notes": "Transaction ID."
          },
          {
            "name": "Start",
            "type": "ns.VarInt",
            "notes": "Start of the text to replace."
          },
          {
            "name": "Length",
            "type": "ns.VarInt",
            "notes": "Length of the text to replace."
          },
          {
            "name": "Tooltip",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": "Tooltip to display."
          }
        ]
      },
      {
        "name": "Commands",
        "id": "0x10",
        "resource": "commands",
        "notes": "Lists all of the commands on the server, and how they are parsed.\n\nThis is a directed graph, with one root node. Each redirect or child node must refer only to nodes that have already been declared.\n\nFor more information on this packet, see the Command Data article.",
        "fields": [
          {
            "name": "Nodes",
            "type": "ns.PrefixedArray[ns.Node]",
            "notes": "An array of nodes."
          },
          {
            "name": "Root index",
            "type": "ns.VarInt",
            "notes": "Index of the root node in the previous array."
          }
        ]
      },
      {
        "name": "Close Container",
        "id": "0x11",
        "resource": "container_close",
        "notes": "This packet is sent from the server to the client when a window is forcibly closed, such as when a chest is destroyed while it's open. The vanilla client disregards the provided window ID and closes any active\nwindow.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "This is the ID of the window that was closed. 0 for inventory."
          }
        ]
      },
      {
        "name": "Set Container Content",
        "id": "0x12",
        "resource": "container_set_content",
        "notes": "Replaces the contents of a container window. Sent by the server upon initialization of a container window or the player's inventory, and in response to state ID mismatches (see #Click Container ).\n\nSee inventory windows for further information about how slots\nare indexed. Use Open Screen to open the container on the client.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "The ID of window which items are being sent for. 0 for player inventory. The client ignores any packets targeting a Window ID other than the current one. However, an exception is made for the player\ninventory, which may be targeted at any time. (The vanilla server does not appear to utilize this special case.)"
          },
          {
            "name": "State ID",
            "type": "ns.VarInt",
            "notes": "A server-managed sequence number used to avoid desynchronization; see #Click Container ."
          },
          {
            "name": "Carried Item",
            "type": "ns.Slot",
            "notes": "Item being dragged with the mouse."
          }
        ]
      },
      {
        "name": "Set Container Property",
        "id": "0x13",
        "resource": "container_set_data",
        "notes": "This packet is used to inform the client that part of a GUI window should be updated.\n\nThe meaning of the Property field depends on the type of the window. The following table shows the known combinations of window type and property, and how the value is to be interpreted.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Property",
            "type": "ns.Short",
            "notes": "The property to be updated, see below."
          },
          {
            "name": "Value",
            "type": "ns.Short",
            "notes": "The new value for the property, see below."
          }
        ]
      },
      {
        "name": "Set Container Slot",
        "id": "0x14",
        "resource": "container_set_slot",
        "notes": "Sent by the server when an item in a slot (in a window) is added/removed.\n\nIf Window ID is 0, the hotbar and offhand slots (slots 36 through 45) may be updated even when a different container window is open. (The vanilla server does not appear to utilize this special case.) Updates are\nalso restricted to those slots when the player is looking at a creative inventory tab other than the survival inventory. (The vanilla server does not handle this restriction in any way, leading to MC-242392 .)\n\nIf Window ID is -1, the item being dragged with the mouse is set. In this case, State ID and Slot are ignored.\n\nIf Window ID is -2, any slot in the player's inventory can be updated irrespective of the current container window. In this case, State ID is ignored, and the vanilla server uses a bogus value of 0. Used by the\nvanilla server to implement the #Pick Item functionality.\n\nWhen a container window is open, the server never sends updates targeting Window ID 0\u2014all of the window types include slots for the player inventory. The client must\nautomatically apply changes targeting the inventory portion of a container window to the main inventory; the server does not resend them for ID 0 when the window is closed. However, since the armor and offhand\nslots are only present on ID 0, updates to those slots occurring while a window is open must be deferred by the server until the window's closure.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "The window which is being updated. 0 for player inventory. The client ignores any packets targeting a Window ID other than the current one; see below for exceptions."
          },
          {
            "name": "State ID",
            "type": "ns.VarInt",
            "notes": "A server-managed sequence number used to avoid desynchronization; see #Click Container ."
          },
          {
            "name": "Slot",
            "type": "ns.Short",
            "notes": "The slot that should be updated."
          },
          {
            "name": "Slot Data",
            "type": "ns.Slot",
            "notes": ""
          }
        ]
      },
      {
        "name": "Cookie Request (play)",
        "id": "0x15",
        "resource": "cookie_request",
        "notes": "Requests a cookie that was previously stored.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          }
        ]
      },
      {
        "name": "Set Cooldown",
        "id": "0x16",
        "resource": "cooldown",
        "notes": "Applies a cooldown period to all items with the given type. Used by the vanilla server with enderpearls. This packet should be sent when the cooldown starts and also when the cooldown ends (to compensate for\nlag), although the client will end the cooldown automatically. Can be applied to any item, note that interactions still get sent to the server with the item but the client does not play the animation nor attempt\nto predict results (i.e block placing).",
        "fields": [
          {
            "name": "Cooldown Group",
            "type": "ns.Identifier",
            "notes": "Identifier of the item (minecraft:stone) or the cooldown group (\"use_cooldown\" item component)"
          },
          {
            "name": "Cooldown Ticks",
            "type": "ns.VarInt",
            "notes": "Number of ticks to apply a cooldown for, or 0 to clear the cooldown."
          }
        ]
      },
      {
        "name": "Chat Suggestions",
        "id": "0x17",
        "resource": "custom_chat_completions",
        "notes": "Unused by the vanilla server. Likely provided for custom servers to send chat message completions to clients.",
        "fields": [
          {
            "name": "Action",
            "type": "ns.VarInt",
            "notes": "0: Add, 1: Remove, 2: Set"
          },
          {
            "name": "Entries",
            "type": "ns.PrefixedArray[ns.String]",
            "notes": ""
          }
        ]
      },
      {
        "name": "Clientbound Plugin Message (play)",
        "id": "0x18",
        "resource": "custom_payload",
        "notes": "Mods and plugins can use this to send their data. Minecraft itself uses several plugin channels . These internal channels are in the minecraft namespace.\n\nMore information on how it works on Dinnerbone's blog . More documentation about\ninternal and popular registered channels are here .\n\nIn vanilla clients, the maximum data length is 1048576 bytes.",
        "fields": [
          {
            "name": "Channel",
            "type": "ns.Identifier",
            "notes": "Name of the plugin channel used to send the\ndata."
          },
          {
            "name": "Data",
            "type": "ns.ByteArray",
            "notes": "Any data. The length of this array must be inferred from the packet length."
          }
        ]
      },
      {
        "name": "Damage Event",
        "id": "0x19",
        "resource": "damage_event",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "The ID of the entity taking damage"
          },
          {
            "name": "Source Type ID",
            "type": "ns.VarInt",
            "notes": "The type of damage in the minecraft:damage_type registry, defined by the Registry Data packet."
          },
          {
            "name": "Source Cause ID",
            "type": "ns.VarInt",
            "notes": "The ID + 1 of the entity responsible for the damage, if present. If not present, the value is 0"
          },
          {
            "name": "Source Direct ID",
            "type": "ns.VarInt",
            "notes": "The ID + 1 of the entity that directly dealt the damage, if present. If not present, the value is 0. If this field is present: and damage was dealt indirectly, such as by the use of a projectile, this field will contain the ID of such projectile; and damage was dealt dirctly, such as by manually attacking, this field will contain the same value as Source Cause ID."
          }
        ]
      },
      {
        "name": "Debug Sample",
        "id": "0x1A",
        "resource": "debug_sample",
        "notes": "Sample data that is sent periodically after the client has subscribed with Debug Sample Subscription .\n\nThe vanilla server only sends debug samples to players that are server operators.\n\nTypes:",
        "fields": [
          {
            "name": "Sample",
            "type": "ns.PrefixedArray[ns.Long]",
            "notes": "Array of type-dependent samples."
          },
          {
            "name": "Sample Type",
            "type": "ns.VarInt",
            "notes": "See below."
          }
        ]
      },
      {
        "name": "Delete Message",
        "id": "0x1B",
        "resource": "delete_chat",
        "notes": "Removes a message from the client's chat. This only works for messages with signatures, system messages cannot be deleted with this packet.",
        "fields": [
          {
            "name": "Message ID",
            "type": "ns.VarInt",
            "notes": "The message Id + 1, used for validating message signature. The next field is present only when value of this field is equal to 0."
          },
          {
            "name": "Signature",
            "type": "ns.Optional[ns.ByteArray]",
            "notes": "The previous message's signature. Always 256 bytes and not length-prefixed."
          }
        ]
      },
      {
        "name": "Disconnect (play)",
        "id": "0x1C",
        "resource": "disconnect",
        "notes": "Sent by the server before it disconnects a client. The client assumes that the server has already closed the connection by the time the packet arrives.",
        "fields": [
          {
            "name": "Reason",
            "type": "ns.TextComponent",
            "notes": "Displayed to the client when the connection terminates."
          }
        ]
      },
      {
        "name": "Disguised Chat Message",
        "id": "0x1D",
        "resource": "disguised_chat",
        "notes": "Sends the client a chat message, but without any message signing information.\n\nThe vanilla server uses this packet when the console is communicating with players through commands, such as /say , /tell , /me , among others.",
        "fields": [
          {
            "name": "Message",
            "type": "ns.TextComponent",
            "notes": "This is used as the content parameter when formatting the message on the client."
          },
          {
            "name": "Chat Type",
            "type": "ns.Or[ns.Identifier, ns.ChatType]",
            "notes": "Either the type of chat in the minecraft:chat_type registry, defined by the Registry Data packet, or an\ninline definition."
          },
          {
            "name": "Sender Name",
            "type": "ns.TextComponent",
            "notes": "The name of the one sending the message, usually the sender's display name. This is used as the sender parameter when formatting the message on the client."
          },
          {
            "name": "Target Name",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": "The name of the one receiving the message, usually the receiver's display name. This is used as the target parameter when formatting the message on the client."
          }
        ]
      },
      {
        "name": "Entity Event",
        "id": "0x1E",
        "resource": "entity_event",
        "notes": "Entity statuses generally trigger an animation for an entity. The available statuses vary by the entity's type (and are available to subclasses of that type as well).",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.Int",
            "notes": ""
          },
          {
            "name": "Entity Status",
            "type": "ns.Byte",
            "notes": "See Entity statuses for a list of which\nstatuses are valid for each type of entity."
          }
        ]
      },
      {
        "name": "Teleport Entity",
        "id": "0x1F",
        "resource": "entity_position_sync",
        "notes": "This packet is sent by the server when an entity moves more than 8 blocks.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Rotation on the X axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Rotation on the Y axis, in degrees."
          },
          {
            "name": "On Ground",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Explosion",
        "id": "0x20",
        "resource": "explode",
        "notes": "Sent when an explosion occurs (creepers, TNT, and ghast fireballs).",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Explosion Particle ID",
            "type": "ns.VarInt",
            "notes": "The particle ID listed in Particles ."
          },
          {
            "name": "Explosion Particle Data",
            "type": "ns.Varies",
            "notes": "Particle data as specified in Particles ."
          },
          {
            "name": "Explosion Sound",
            "type": "ns.Or[ns.Identifier, ns.SoundEvent]",
            "notes": "ID in the minecraft:sound_event registry, or an inline definition."
          }
        ]
      },
      {
        "name": "Unload Chunk",
        "id": "0x21",
        "resource": "forget_level_chunk",
        "notes": "Tells the client to unload a chunk column.\n\nNote: The order is inverted, because the client reads this packet as one big-endian Long , with Z being the upper 32 bits.\n\nIt is legal to send this packet even if the given chunk is not currently loaded.",
        "fields": [
          {
            "name": "Chunk Z",
            "type": "ns.Int",
            "notes": "Block coordinate divided by 16, rounded down."
          },
          {
            "name": "Chunk X",
            "type": "ns.Int",
            "notes": "Block coordinate divided by 16, rounded down."
          }
        ]
      },
      {
        "name": "Game Event",
        "id": "0x22",
        "resource": "game_event",
        "notes": "Used for a wide variety of game events, such as weather, respawn availability (from bed and respawn anchor ), game mode, some game rules, and demo messages.\n\nEvents :",
        "fields": [
          {
            "name": "Event",
            "type": "ns.UnsignedByte",
            "notes": "See below."
          },
          {
            "name": "Value",
            "type": "ns.Float",
            "notes": "Depends on Event."
          }
        ]
      },
      {
        "name": "Open Horse Screen",
        "id": "0x23",
        "resource": "horse_screen_open",
        "notes": "This packet is used exclusively for opening the horse GUI. Open Screen is used for all other GUIs. The client will not open the inventory if the Entity ID does not point to an\nhorse-like animal.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "Same as the field of Open Screen ."
          },
          {
            "name": "Inventory columns count",
            "type": "ns.VarInt",
            "notes": "How many columns of horse inventory slots exist in the GUI, 3 slots per column."
          },
          {
            "name": "Entity ID",
            "type": "ns.Int",
            "notes": "The \"owner\" entity of the GUI. The client should close the GUI if the owner entity dies or is cleared."
          }
        ]
      },
      {
        "name": "Hurt Animation",
        "id": "0x24",
        "resource": "hurt_animation",
        "notes": "Plays a bobbing animation for the entity receiving damage.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "The ID of the entity taking damage"
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "The direction the damage is coming from in relation to the entity"
          }
        ]
      },
      {
        "name": "Initialize World Border",
        "id": "0x25",
        "resource": "initialize_border",
        "notes": "The vanilla client determines how solid to display the warning by comparing to whichever is higher, the warning distance or whichever is lower, the distance from the current diameter to the target diameter or the\nplace the border will be after warningTime seconds. In pseudocode:",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Old Diameter",
            "type": "ns.Double",
            "notes": "Current length of a single side of the world border, in meters."
          },
          {
            "name": "New Diameter",
            "type": "ns.Double",
            "notes": "Target length of a single side of the world border, in meters."
          },
          {
            "name": "Speed",
            "type": "ns.VarLong",
            "notes": "Number of real-time milli seconds until New Diameter is reached. It appears that vanilla server does not sync world border speed to game ticks, so it gets out of sync with server lag. If the\nworld border is not moving, this is set to 0."
          },
          {
            "name": "Portal Teleport Boundary",
            "type": "ns.VarInt",
            "notes": "Resulting coordinates from a portal teleport are limited to \u00b1value. Usually 29999984."
          },
          {
            "name": "Warning Blocks",
            "type": "ns.VarInt",
            "notes": "In meters."
          },
          {
            "name": "Warning Time",
            "type": "ns.VarInt",
            "notes": "In seconds as set by /worldborder warning time ."
          }
        ]
      },
      {
        "name": "Clientbound Keep Alive (play)",
        "id": "0x26",
        "resource": "keep_alive",
        "notes": "The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same payload (see Serverbound Keep Alive ). If the\nclient does not respond to a Keep Alive packet within 15 seconds after it was sent, the server kicks the client. Vice versa, if the server does not send any keep-alives for 20 seconds, the client will disconnect\nand yields a \"Timed out\" exception.\n\nThe vanilla server uses a system-dependent time in milliseconds to generate the keep alive ID value.",
        "fields": [
          {
            "name": "Keep Alive ID",
            "type": "ns.Long",
            "notes": ""
          }
        ]
      },
      {
        "name": "Chunk Data and Update Light",
        "id": "0x27",
        "resource": "level_chunk_with_light",
        "notes": "Sent when a chunk comes into the client's view distance, specifying its terrain, lighting and block entities.\n\nThe chunk must be within the view area previously specified with Set Center Chunk ; see that packet for details.\n\nIt is not strictly necessary to send all block entities in this packet; it is still legal to send them with Block Entity Data later.\n\nUnlike the Update Light packet which uses the same format, setting the bit corresponding to a section to 0 in both of the block light or sky light masks does not appear to be useful,\nand the results in testing have been highly inconsistent.",
        "fields": [
          {
            "name": "Chunk X",
            "type": "ns.Int",
            "notes": "Chunk coordinate (block coordinate divided by 16, rounded down)"
          },
          {
            "name": "Chunk Z",
            "type": "ns.Int",
            "notes": "Chunk coordinate (block coordinate divided by 16, rounded down)"
          },
          {
            "name": "Data",
            "type": "ns.ChunkData",
            "notes": ""
          },
          {
            "name": "Light",
            "type": "ns.LightData",
            "notes": ""
          }
        ]
      },
      {
        "name": "World Event",
        "id": "0x28",
        "resource": "level_event",
        "notes": "Sent when a client is to play a sound or particle effect.\n\nBy default, the Minecraft client adjusts the volume of sound effects based on distance. The final boolean field is used to disable this, and instead the effect is played from 2 blocks away in the correct\ndirection. Currently this is only used for effect 1023 (wither spawn), effect 1028 (enderdragon death), and effect 1038 (end portal opening); it is ignored on other effects.\n\nEvents:",
        "fields": [
          {
            "name": "Event",
            "type": "ns.Int",
            "notes": "The event, see below."
          },
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "The location of the event."
          },
          {
            "name": "Data",
            "type": "ns.Int",
            "notes": "Extra data for certain events, see below."
          },
          {
            "name": "Disable Relative Volume",
            "type": "ns.Boolean",
            "notes": "See above."
          }
        ]
      },
      {
        "name": "Particle",
        "id": "0x29",
        "resource": "level_particles",
        "notes": "Displays the named particle",
        "fields": [
          {
            "name": "Long Distance",
            "type": "ns.Boolean",
            "notes": "If true, particle distance increases from 256 to 65536."
          },
          {
            "name": "Always Visible",
            "type": "ns.Boolean",
            "notes": "Whether this particle should always be visible."
          },
          {
            "name": "X",
            "type": "ns.Double",
            "notes": "X position of the particle."
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": "Y position of the particle."
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": "Z position of the particle."
          },
          {
            "name": "Offset X",
            "type": "ns.Float",
            "notes": "This is added to the X position after being multiplied by random.nextGaussian() ."
          },
          {
            "name": "Offset Y",
            "type": "ns.Float",
            "notes": "This is added to the Y position after being multiplied by random.nextGaussian() ."
          },
          {
            "name": "Offset Z",
            "type": "ns.Float",
            "notes": "This is added to the Z position after being multiplied by random.nextGaussian() ."
          },
          {
            "name": "Max Speed",
            "type": "ns.Float",
            "notes": ""
          },
          {
            "name": "Particle Count",
            "type": "ns.Int",
            "notes": "The number of particles to create."
          },
          {
            "name": "Particle ID",
            "type": "ns.VarInt",
            "notes": "The particle ID listed in Particles ."
          },
          {
            "name": "Data",
            "type": "ns.Varies",
            "notes": "Particle data as specified in Particles ."
          }
        ]
      },
      {
        "name": "Update Light",
        "id": "0x2A",
        "resource": "light_update",
        "notes": "Updates light levels for a chunk. See Light for information on how lighting works in Minecraft.\n\nA bit will never be set in both the block light mask and the empty block light mask, though it may be present in neither of them (if the block light does not need to be updated for the corresponding chunk\nsection). The same applies to the sky light mask and the empty sky light mask.",
        "fields": [
          {
            "name": "Chunk X",
            "type": "ns.VarInt",
            "notes": "Chunk coordinate (block coordinate divided by 16, rounded down)"
          },
          {
            "name": "Chunk Z",
            "type": "ns.VarInt",
            "notes": "Chunk coordinate (block coordinate divided by 16, rounded down)"
          },
          {
            "name": "Data",
            "type": "ns.LightData",
            "notes": ""
          }
        ]
      },
      {
        "name": "Login (play)",
        "id": "0x2B",
        "resource": "login",
        "notes": "See protocol encryption for information on logging in.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.Int",
            "notes": "The player's Entity ID (EID)."
          },
          {
            "name": "Is hardcore",
            "type": "ns.Boolean",
            "notes": ""
          },
          {
            "name": "Dimension Names",
            "type": "ns.PrefixedArray[ns.Identifier]",
            "notes": "Identifiers for all dimensions on the server."
          },
          {
            "name": "Max Players",
            "type": "ns.VarInt",
            "notes": "Was once used by the client to draw the player list, but now is ignored."
          },
          {
            "name": "View Distance",
            "type": "ns.VarInt",
            "notes": "Render distance (2-32)."
          },
          {
            "name": "Simulation Distance",
            "type": "ns.VarInt",
            "notes": "The distance that the client will process specific things, such as entities."
          },
          {
            "name": "Reduced Debug Info",
            "type": "ns.Boolean",
            "notes": "If true, a vanilla client shows reduced information on the debug screen . For servers in development, this should almost always be false."
          },
          {
            "name": "Enable respawn screen",
            "type": "ns.Boolean",
            "notes": "Set to false when the doImmediateRespawn gamerule is true."
          },
          {
            "name": "Do limited crafting",
            "type": "ns.Boolean",
            "notes": "Whether players can only craft recipes they have already unlocked. Currently unused by the client."
          },
          {
            "name": "Dimension Type",
            "type": "ns.VarInt",
            "notes": "The ID of the type of dimension in the minecraft:dimension_type registry, defined by the Registry Data packet."
          },
          {
            "name": "Dimension Name",
            "type": "ns.Identifier",
            "notes": "Name of the dimension being spawned into."
          },
          {
            "name": "Hashed seed",
            "type": "ns.Long",
            "notes": "First 8 bytes of the SHA-256 hash of the world's seed. Used client side for biome noise"
          },
          {
            "name": "Game mode",
            "type": "ns.UnsignedByte",
            "notes": "0: Survival, 1: Creative, 2: Adventure, 3: Spectator."
          },
          {
            "name": "Previous Game mode",
            "type": "ns.Byte",
            "notes": "-1: Undefined (null), 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. The previous game mode. Vanilla client uses this for the debug (F3 + N & F3 + F4) game mode switch. (More information\nneeded)"
          },
          {
            "name": "Is Debug",
            "type": "ns.Boolean",
            "notes": "True if the world is a debug mode world; debug mode worlds cannot be modified and have predefined blocks."
          },
          {
            "name": "Is Flat",
            "type": "ns.Boolean",
            "notes": "True if the world is a superflat world; flat worlds have different void fog and a horizon at y=0 instead of y=63."
          },
          {
            "name": "Has death location",
            "type": "ns.Boolean",
            "notes": "If true, then the next two fields are present."
          },
          {
            "name": "Death dimension name",
            "type": "ns.Optional[ns.Identifier]",
            "notes": "Name of the dimension the player died in."
          },
          {
            "name": "Death location",
            "type": "ns.Optional[ns.Position]",
            "notes": "The location that the player died at."
          },
          {
            "name": "Portal cooldown",
            "type": "ns.VarInt",
            "notes": "The number of ticks until the player can use the last used portal again. Looks like it's an attempt to fix MC-180."
          },
          {
            "name": "Sea level",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Enforces Secure Chat",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Map Data",
        "id": "0x2C",
        "resource": "map_item_data",
        "notes": "Updates a rectangular area on a map item.\n\nFor icons, a direction of 0 is a vertical icon and increments by 22.5\u00b0 (360/16).\n\nTypes are based off of rows and columns in map_icons.png :",
        "fields": [
          {
            "name": "Map ID",
            "type": "ns.VarInt",
            "notes": "Map ID of the map being modified"
          },
          {
            "name": "Scale",
            "type": "ns.Byte",
            "notes": "From 0 for a fully zoomed-in map (1 block per pixel) to 4 for a fully zoomed-out map (16 blocks per pixel)"
          },
          {
            "name": "Locked",
            "type": "ns.Boolean",
            "notes": "True if the map has been locked in a cartography table"
          },
          {
            "name": "X",
            "type": "ns.Byte",
            "notes": "Map coordinates: -128 for furthest left, +127 for furthest right"
          },
          {
            "name": "Z",
            "type": "ns.Byte",
            "notes": "Map coordinates: -128 for highest, +127 for lowest"
          },
          {
            "name": "Direction",
            "type": "ns.Byte",
            "notes": "0-15"
          },
          {
            "name": "Display Name",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": ""
          },
          {
            "name": "Rows",
            "type": "ns.Optional[ns.UnsignedByte]",
            "notes": "Only if Columns is more than 0; number of rows updated"
          },
          {
            "name": "X",
            "type": "ns.Optional[ns.UnsignedByte]",
            "notes": "Only if Columns is more than 0; x offset of the westernmost column"
          },
          {
            "name": "Z",
            "type": "ns.Optional[ns.UnsignedByte]",
            "notes": "Only if Columns is more than 0; z offset of the northernmost row"
          },
          {
            "name": "Data",
            "type": "ns.Optional[ns.PrefixedUnsignedArrayByte]",
            "notes": "Only if Columns is more than 0; see Map item format"
          }
        ]
      },
      {
        "name": "Merchant Offers",
        "id": "0x2D",
        "resource": "merchant_offers",
        "notes": "The list of trades a villager NPC is offering.\n\nTrade Item:",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "The ID of the window that is open; this is an int rather than a byte."
          },
          {
            "name": "Output item",
            "type": "ns.Slot",
            "notes": "The item the player will receive from this villager trade."
          },
          {
            "name": "Input item 2",
            "type": "ns.PrefixedOptional[ns.TradeItem]",
            "notes": "The second item the player has to supply for this villager trade."
          },
          {
            "name": "Trade disabled",
            "type": "ns.Boolean",
            "notes": "True if the trade is disabled; false if the trade is enabled."
          },
          {
            "name": "Number of trade uses",
            "type": "ns.Int",
            "notes": "Number of times the trade has been used so far. If equal to the maximum number of trades, the client will display a red X."
          },
          {
            "name": "Maximum number of trade uses",
            "type": "ns.Int",
            "notes": "Number of times this trade can be used before it's exhausted."
          },
          {
            "name": "XP",
            "type": "ns.Int",
            "notes": "Amount of XP the villager will earn each time the trade is used."
          },
          {
            "name": "Special Price",
            "type": "ns.Int",
            "notes": "Can be zero or negative. The number is added to the price when an item is discounted due to player reputation or other effects."
          },
          {
            "name": "Price Multiplier",
            "type": "ns.Float",
            "notes": "Can be low (0.05) or high (0.2). Determines how much demand, player reputation, and temporary effects will adjust the price."
          },
          {
            "name": "Demand",
            "type": "ns.Int",
            "notes": "If positive, causes the price to increase. Negative values seem to be treated the same as zero."
          },
          {
            "name": "Villager level",
            "type": "ns.VarInt",
            "notes": "Appears on the trade GUI; meaning comes from the translation key merchant.level. + level. 1: Novice, 2: Apprentice, 3: Journeyman, 4: Expert, 5: Master."
          },
          {
            "name": "Experience",
            "type": "ns.VarInt",
            "notes": "Total experience for this villager (always 0 for the wandering trader)."
          },
          {
            "name": "Is regular villager",
            "type": "ns.Boolean",
            "notes": "True if this is a regular villager; false for the wandering trader. When false, hides the villager level and some other GUI elements."
          },
          {
            "name": "Can restock",
            "type": "ns.Boolean",
            "notes": "True for regular villagers and false for the wandering trader. If true, the \"Villagers restock up to two times per day.\" message is displayed when hovering over disabled trades."
          }
        ]
      },
      {
        "name": "Update Entity Position",
        "id": "0x2E",
        "resource": "move_entity_pos",
        "notes": "This packet is sent by the server when an entity moves a small distance. The change in position is represented as a fixed-point number with 12 fraction bits and 4 integer bits.\nAs such, the maximum movement distance along each axis is 8 blocks in the negative direction, or 7.999755859375 blocks in the positive direction. If the movement exceeds these limits, Teleport Entity should be sent instead.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Delta X",
            "type": "ns.Short",
            "notes": "Change in X position as currentX * 4096 - prevX * 4096 ."
          },
          {
            "name": "Delta Y",
            "type": "ns.Short",
            "notes": "Change in Y position as currentY * 4096 - prevY * 4096 ."
          },
          {
            "name": "Delta Z",
            "type": "ns.Short",
            "notes": "Change in Z position as currentZ * 4096 - prevZ * 4096 ."
          },
          {
            "name": "On Ground",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Entity Position and Rotation",
        "id": "0x2F",
        "resource": "move_entity_pos_rot",
        "notes": "This packet is sent by the server when an entity rotates and moves. See #Update Entity Position for how the position is encoded.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Delta X",
            "type": "ns.Short",
            "notes": "Change in X position as currentX * 4096 - prevX * 4096 ."
          },
          {
            "name": "Delta Y",
            "type": "ns.Short",
            "notes": "Change in Y position as currentY * 4096 - prevY * 4096 ."
          },
          {
            "name": "Delta Z",
            "type": "ns.Short",
            "notes": "Change in Z position as currentZ * 4096 - prevZ * 4096 ."
          },
          {
            "name": "Yaw",
            "type": "ns.Angle",
            "notes": "New angle, not a delta."
          },
          {
            "name": "Pitch",
            "type": "ns.Angle",
            "notes": "New angle, not a delta."
          },
          {
            "name": "On Ground",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Move Minecart Along Track",
        "id": "0x30",
        "resource": "move_minecart_along_track",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Yaw",
            "type": "ns.Angle",
            "notes": ""
          },
          {
            "name": "Pitch",
            "type": "ns.Angle",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Entity Rotation",
        "id": "0x31",
        "resource": "move_entity_rot",
        "notes": "This packet is sent by the server when an entity rotates.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Yaw",
            "type": "ns.Angle",
            "notes": "New angle, not a delta."
          },
          {
            "name": "Pitch",
            "type": "ns.Angle",
            "notes": "New angle, not a delta."
          },
          {
            "name": "On Ground",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Move Vehicle",
        "id": "0x32",
        "resource": "move_vehicle",
        "notes": "Note that all fields use absolute positioning and do not allow for relative positioning.",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": "Absolute position (X coordinate)."
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": "Absolute position (Y coordinate)."
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": "Absolute position (Z coordinate)."
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Absolute rotation on the vertical axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Absolute rotation on the horizontal axis, in degrees."
          }
        ]
      },
      {
        "name": "Open Book",
        "id": "0x33",
        "resource": "open_book",
        "notes": "Sent when a player right clicks with a signed book. This tells the client to open the book GUI.",
        "fields": [
          {
            "name": "Hand",
            "type": "ns.VarInt",
            "notes": "0: Main hand, 1: Off hand ."
          }
        ]
      },
      {
        "name": "Open Screen",
        "id": "0x34",
        "resource": "open_screen",
        "notes": "This is sent to the client when it should open an inventory, such as a chest, workbench, furnace, or other container. Resending this packet with already existing window id, will update the window title and window\ntype without closing the window.\n\nThis message is not sent to clients opening their own inventory, nor do clients inform the server in any way when doing so. From the server's perspective, the inventory is always \"open\" whenever no other windows\nare.\n\nFor horses, use Open Horse Screen .",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "An identifier for the window to be displayed. vanilla server implementation is a counter, starting at 1. There can only be one window at a time; this is only used to ignore outdated packets targeting\nalready-closed windows. Note also that the Window ID field in most other packets is only a single byte, and indeed, the vanilla server wraps around after 100."
          },
          {
            "name": "Window Type",
            "type": "ns.VarInt",
            "notes": "The window type to use for display. Contained in the minecraft:menu registry; see Inventory for the different values."
          },
          {
            "name": "Window Title",
            "type": "ns.TextComponent",
            "notes": "The title of the window."
          }
        ]
      },
      {
        "name": "Open Sign Editor",
        "id": "0x35",
        "resource": "open_sign_editor",
        "notes": "Sent when the client has placed a sign and is allowed to send Update Sign . There must already be a sign at the given location (which the client does not do automatically) - send a Block Update first.",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": ""
          },
          {
            "name": "Is Front Text",
            "type": "ns.Boolean",
            "notes": "Whether the opened editor is for the front or on the back of the sign"
          }
        ]
      },
      {
        "name": "Ping (play)",
        "id": "0x36",
        "resource": "ping",
        "notes": "Packet is not used by the vanilla server. When sent to the client, client responds with a Pong packet with the same id.\n\nUnlike Keep Alive this packet is handled synchronously with game logic on the vanilla client, and can thus be used to reliably detect which serverbound packets were\nsent after the ping and all preceding clientbound packets were received and handled.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.Int",
            "notes": ""
          }
        ]
      },
      {
        "name": "Ping Response (play)",
        "id": "0x37",
        "resource": "pong_response",
        "notes": "",
        "fields": [
          {
            "name": "Payload",
            "type": "ns.Long",
            "notes": "Should be the same as sent by the client."
          }
        ]
      },
      {
        "name": "Place Ghost Recipe",
        "id": "0x38",
        "resource": "place_ghost_recipe",
        "notes": "Response to the serverbound packet ( Place Recipe ), with the same recipe ID. Appears to be used to notify the UI.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Recipe Display",
            "type": "ns.RecipeDisplay",
            "notes": ""
          }
        ]
      },
      {
        "name": "Player Abilities (clientbound)",
        "id": "0x39",
        "resource": "player_abilities",
        "notes": "The latter 2 floats are used to indicate the flying speed and field of view respectively, while the first byte is used to determine the value of 4 booleans.\n\nAbout the flags:",
        "fields": [
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit field, see below."
          },
          {
            "name": "Flying Speed",
            "type": "ns.Float",
            "notes": "0.05 by default."
          },
          {
            "name": "Field of View Modifier",
            "type": "ns.Float",
            "notes": "Modifies the field of view, like a speed potion. A vanilla server will use the same value as the movement speed sent in the Update Attributes packet, which defaults to\n0.1 for players."
          }
        ]
      },
      {
        "name": "Player Chat Message",
        "id": "0x3A",
        "resource": "player_chat",
        "notes": "Sends the client a chat message from a player.\n\nCurrently a lot is unknown about this packet, blank descriptions are for those that are unknown",
        "fields": [
          {
            "name": "Header",
            "type": "ns.GlobalIndex",
            "notes": "VarInt"
          },
          {
            "name": "Sender",
            "type": "ns.UUID",
            "notes": "Used by the vanilla client for the disableChat launch option. Setting both longs to 0 will always display the message regardless of the setting."
          },
          {
            "name": "Index",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Message Signature bytes",
            "type": "ns.PrefixedOptional[ns.ByteArray]",
            "notes": "Cryptography, the signature consists of the Sender UUID, Session UUID from the Player Session packet, Index, Salt, Timestamp in epoch seconds, the length of the original\nchat content, the original content itself, the length of Previous Messages, and all of the Previous message signatures. These values are hashed with SHA-256 and signed using the RSA cryptosystem. Modifying any of these values in the packet\nwill cause this signature to fail. This buffer is always 256 bytes long and it is not length-prefixed."
          },
          {
            "name": "Timestamp",
            "type": "ns.Long",
            "notes": "Represents the time the message was signed as milliseconds since the epoch , used to check if the message was received within 2 minutes of it\nbeing sent."
          },
          {
            "name": "Salt",
            "type": "ns.Long",
            "notes": "Cryptography, used for validating the message signature."
          },
          {
            "name": "Signature",
            "type": "ns.Optional[ns.ByteArray]",
            "notes": "The previous message's signature. Contains the same type of data as Message Signature bytes (256 bytes) above. Not length-prefxied."
          },
          {
            "name": "Filter Type",
            "type": "ns.VarInt",
            "notes": "If the message has been filtered"
          },
          {
            "name": "Filter Type Bits",
            "type": "ns.Optional[ns.BitSet]",
            "notes": "Only present if the Filter Type is Partially Filtered. Specifies the indexes at which characters in the original message string should be replaced with the # symbol (i.e. filtered) by the\nvanilla client"
          },
          {
            "name": "Sender Name",
            "type": "ns.TextComponent",
            "notes": "The name of the one sending the message, usually the sender's display name. This is used as the sender parameter when formatting the message on the client."
          },
          {
            "name": "Target Name",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": "The name of the one receiving the message, usually the receiver's display name. This is used as the target parameter when formatting the message on the client."
          }
        ]
      },
      {
        "name": "End Combat",
        "id": "0x3B",
        "resource": "player_combat_end",
        "notes": "Unused by the vanilla client. This data was once used for twitch.tv metadata circa 1.8.",
        "fields": [
          {
            "name": "Duration",
            "type": "ns.VarInt",
            "notes": "Length of the combat in ticks."
          }
        ]
      },
      {
        "name": "Enter Combat",
        "id": "0x3C",
        "resource": "player_combat_enter",
        "notes": "Unused by the vanilla client. This data was once used for twitch.tv metadata circa 1.8.",
        "fields": []
      },
      {
        "name": "Combat Death",
        "id": "0x3D",
        "resource": "player_combat_kill",
        "notes": "Used to send a respawn screen.",
        "fields": [
          {
            "name": "Player ID",
            "type": "ns.VarInt",
            "notes": "Entity ID of the player that died (should match the client's entity ID)."
          },
          {
            "name": "Message",
            "type": "ns.TextComponent",
            "notes": "The death message."
          }
        ]
      },
      {
        "name": "Player Info Remove",
        "id": "0x3E",
        "resource": "player_info_remove",
        "notes": "Used by the server to remove players from the player list.",
        "fields": [
          {
            "name": "UUIDs",
            "type": "ns.PrefixedArray[ns.UUID]",
            "notes": "UUIDs of players to remove."
          }
        ]
      },
      {
        "name": "Player Info Update",
        "id": "0x3F",
        "resource": "player_info_update",
        "notes": "",
        "fields": [
          {
            "name": "Actions",
            "type": "ns.EnumSet",
            "notes": "Determines what actions are present."
          },
          {
            "name": "Player Actions",
            "type": "ns.PlayerArrayActions",
            "notes": "The length of this array is determined by the number of Player Actions that give a non-zero value when applying its mask to the actions flag. For example\ngiven the decimal number 5, binary 00000101. The masks 0x01 and 0x04 would return a non-zero value, meaning the Player Actions array would include two actions: Add Player and Update Game Mode."
          }
        ]
      },
      {
        "name": "Look At",
        "id": "0x40",
        "resource": "player_look_at",
        "notes": "Used to rotate the client player to face the given location or entity (for /teleport [<targets>] <x> <y> <z> facing ).\n\nIf the entity given by entity ID cannot be found, this packet should be treated as if is entity was false.",
        "fields": [
          {
            "name": "Feet/eyes",
            "type": "ns.VarInt",
            "notes": "Values are feet=0, eyes=1. If set to eyes, aims using the head position; otherwise aims using the feet position."
          },
          {
            "name": "Target x",
            "type": "ns.Double",
            "notes": "x coordinate of the point to face towards."
          },
          {
            "name": "Target y",
            "type": "ns.Double",
            "notes": "y coordinate of the point to face towards."
          },
          {
            "name": "Target z",
            "type": "ns.Double",
            "notes": "z coordinate of the point to face towards."
          },
          {
            "name": "Is entity",
            "type": "ns.Boolean",
            "notes": "If true, additional information about an entity is provided."
          },
          {
            "name": "Entity ID",
            "type": "ns.Optional[ns.VarInt]",
            "notes": "Only if is entity is true \u2014 the entity to face towards."
          },
          {
            "name": "Entity feet/eyes",
            "type": "ns.Optional[ns.VarInt]",
            "notes": "Whether to look at the entity's eyes or feet. Same values and meanings as before, just for the entity's head/feet."
          }
        ]
      },
      {
        "name": "Synchronize Player Position",
        "id": "0x41",
        "resource": "player_position",
        "notes": "Teleports the client, e.g. during login, when using an ender pearl, in response to invalid move packets, etc.\n\nDue to latency, the server may receive outdated movement packets sent before the client was aware of the teleport. To account for this, the server ignores all movement packets from the client until a Confirm Teleportation packet with an ID matching the one sent in the teleport packet is received.\n\nYaw is measured in degrees, and does not follow classical trigonometry rules. The unit circle of yaw on the XZ-plane starts at (0, 1) and turns counterclockwise, with 90 at (-1, 0), 180 at (0, -1) and 270 at (1,\n0). Additionally, yaw is not clamped to between 0 and 360 degrees; any number is valid, including negative numbers and numbers greater than 360 (see MC-90097 ).\n\nPitch is measured in degrees, where 0 is looking straight ahead, -90 is looking straight up, and 90 is looking straight down.",
        "fields": [
          {
            "name": "Teleport ID",
            "type": "ns.VarInt",
            "notes": "Client should confirm this packet with Confirm Teleportation containing the same Teleport ID."
          },
          {
            "name": "X",
            "type": "ns.Double",
            "notes": "Absolute or relative position, depending on Flags."
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": "Absolute or relative position, depending on Flags."
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": "Absolute or relative position, depending on Flags."
          },
          {
            "name": "Velocity X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Absolute or relative rotation on the X axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Absolute or relative rotation on the Y axis, in degrees."
          },
          {
            "name": "Flags",
            "type": "ns.TeleportFlags",
            "notes": ""
          }
        ]
      },
      {
        "name": "Player Rotation",
        "id": "0x42",
        "resource": "player_rotation",
        "notes": "",
        "fields": [
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Rotation on the X axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Rotation on the Y axis, in degrees."
          }
        ]
      },
      {
        "name": "Recipe Book Add",
        "id": "0x43",
        "resource": "recipe_book_add",
        "notes": "",
        "fields": [
          {
            "name": "Recipes",
            "type": "ns.PrefixedArray[struct { RecipeId ns.VarInt; Display ns.RecipeDisplay; GroupId ns.VarInt; CategoryId ns.VarInt; Ingredients ns.PrefixedOptional[ns.PrefixedIDArraySet]; Flags ns.Byte }]",
            "notes": "Prefixed Array"
          },
          {
            "name": "Replace",
            "type": "ns.Boolean",
            "notes": "Replace or Add to known recipes"
          }
        ]
      },
      {
        "name": "Recipe Book Remove",
        "id": "0x44",
        "resource": "recipe_book_remove",
        "notes": "",
        "fields": [
          {
            "name": "Recipes",
            "type": "ns.PrefixedArray[ns.VarInt]",
            "notes": "IDs of recipes to remove."
          }
        ]
      },
      {
        "name": "Recipe Book Settings",
        "id": "0x45",
        "resource": "recipe_book_settings",
        "notes": "",
        "fields": [
          {
            "name": "Crafting Recipe Book Open",
            "type": "ns.Boolean",
            "notes": "If true, then the crafting recipe book will be open when the player opens its inventory."
          },
          {
            "name": "Crafting Recipe Book Filter Active",
            "type": "ns.Boolean",
            "notes": "If true, then the filtering option is active when the players opens its inventory."
          },
          {
            "name": "Smelting Recipe Book Open",
            "type": "ns.Boolean",
            "notes": "If true, then the smelting recipe book will be open when the player opens its inventory."
          },
          {
            "name": "Smelting Recipe Book Filter Active",
            "type": "ns.Boolean",
            "notes": "If true, then the filtering option is active when the players opens its inventory."
          },
          {
            "name": "Blast Furnace Recipe Book Open",
            "type": "ns.Boolean",
            "notes": "If true, then the blast furnace recipe book will be open when the player opens its inventory."
          },
          {
            "name": "Blast Furnace Recipe Book Filter Active",
            "type": "ns.Boolean",
            "notes": "If true, then the filtering option is active when the players opens its inventory."
          },
          {
            "name": "Smoker Recipe Book Open",
            "type": "ns.Boolean",
            "notes": "If true, then the smoker recipe book will be open when the player opens its inventory."
          },
          {
            "name": "Smoker Recipe Book Filter Active",
            "type": "ns.Boolean",
            "notes": "If true, then the filtering option is active when the players opens its inventory."
          }
        ]
      },
      {
        "name": "Remove Entities",
        "id": "0x46",
        "resource": "remove_entities",
        "notes": "Sent by the server when an entity is to be destroyed on the client.",
        "fields": [
          {
            "name": "Entity IDs",
            "type": "ns.PrefixedArray[ns.VarInt]",
            "notes": "The list of entities to destroy."
          }
        ]
      },
      {
        "name": "Remove Entity Effect",
        "id": "0x47",
        "resource": "remove_mob_effect",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Effect ID",
            "type": "ns.VarInt",
            "notes": "See this table ."
          }
        ]
      },
      {
        "name": "Reset Score",
        "id": "0x48",
        "resource": "reset_score",
        "notes": "This is sent to the client when it should remove a scoreboard item.",
        "fields": [
          {
            "name": "Entity Name",
            "type": "ns.String",
            "notes": "The entity whose score this is. For players, this is their username; for other entities, it is their UUID."
          },
          {
            "name": "Objective Name",
            "type": "ns.PrefixedOptional[ns.String]",
            "notes": "The name of the objective the score belongs to."
          }
        ]
      },
      {
        "name": "Remove Resource Pack (play)",
        "id": "0x49",
        "resource": "resource_pack_pop",
        "notes": "",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.Optional[ns.UUID]",
            "notes": "The UUID of the resource pack to be removed."
          }
        ]
      },
      {
        "name": "Add Resource Pack (play)",
        "id": "0x4A",
        "resource": "resource_pack_push",
        "notes": "",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.UUID",
            "notes": "The unique identifier of the resource pack."
          },
          {
            "name": "URL",
            "type": "ns.String",
            "notes": "The URL to the resource pack."
          },
          {
            "name": "Hash",
            "type": "ns.String",
            "notes": "A 40 character hexadecimal, case-insensitive SHA-1 hash of the resource pack file. If it's not a 40\ncharacter hexadecimal string, the client will not use it for hash verification and likely waste bandwidth."
          },
          {
            "name": "Forced",
            "type": "ns.Boolean",
            "notes": "The vanilla client will be forced to use the resource pack from the server. If they decline they will be kicked from the server."
          },
          {
            "name": "Prompt Message",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": "This is shown in the prompt making the client accept or decline the resource pack."
          }
        ]
      },
      {
        "name": "Respawn",
        "id": "0x4B",
        "resource": "respawn",
        "notes": "To change the player's dimension (overworld/nether/end), send them a respawn packet with the appropriate dimension, followed by prechunks/chunks for the new dimension, and finally a position and look packet. You\ndo not need to unload chunks, the client will do it automatically.\n\nThe background of the loading screen is determined based on the Dimension Name specified in this packet, and the one specified in the previous Login or Respawn packet. If either the current or the previous\ndimension is minecraft:nether , the Nether portal background is used. Otherwise, if the current or the previous dimension is minecraft:the_end , the End portal background is used. If the\nplayer is dead (health is 0), the default background is always used.",
        "fields": [
          {
            "name": "Dimension Type",
            "type": "ns.VarInt",
            "notes": "The ID of type of dimension in the minecraft:dimension_type registry, defined by the Registry Data packet."
          },
          {
            "name": "Dimension Name",
            "type": "ns.Identifier",
            "notes": "Name of the dimension being spawned into."
          },
          {
            "name": "Hashed seed",
            "type": "ns.Long",
            "notes": "First 8 bytes of the SHA-256 hash of the world's seed. Used client side for biome noise"
          },
          {
            "name": "Game mode",
            "type": "ns.UnsignedByte",
            "notes": "0: Survival, 1: Creative, 2: Adventure, 3: Spectator."
          },
          {
            "name": "Previous Game mode",
            "type": "ns.Byte",
            "notes": "-1: Undefined (null), 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. The previous game mode. Vanilla client uses this for the debug (F3 + N & F3 + F4) game mode switch. (More information\nneeded)"
          },
          {
            "name": "Is Debug",
            "type": "ns.Boolean",
            "notes": "True if the world is a debug mode world; debug mode worlds cannot be modified and have predefined blocks."
          },
          {
            "name": "Is Flat",
            "type": "ns.Boolean",
            "notes": "True if the world is a superflat world; flat worlds have different void fog and a horizon at y=0 instead of y=63."
          },
          {
            "name": "Has death location",
            "type": "ns.Boolean",
            "notes": "If true, then the next two fields are present."
          },
          {
            "name": "Death dimension Name",
            "type": "ns.Optional[ns.Identifier]",
            "notes": "Name of the dimension the player died in."
          },
          {
            "name": "Death location",
            "type": "ns.Optional[ns.Position]",
            "notes": "The location that the player died at."
          },
          {
            "name": "Portal cooldown",
            "type": "ns.VarInt",
            "notes": "The number of ticks until the player can use the portal again."
          },
          {
            "name": "Sea level",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Data kept",
            "type": "ns.Byte",
            "notes": "Bit mask. 0x01: Keep attributes, 0x02: Keep metadata. Tells which data should be kept on the client side once the player has respawned. In the vanilla implementation, this is context dependent: normal respawns (after death) keep no data; exiting the end poem/credits keeps the attributes; other dimension changes (portals or teleports) keep all data."
          }
        ]
      },
      {
        "name": "Set Head Rotation",
        "id": "0x4C",
        "resource": "rotate_head",
        "notes": "Changes the direction an entity's head is facing.\n\nWhile sending the Entity Look packet changes the vertical rotation of the head, sending this packet appears to be necessary to rotate the head horizontally.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Head Yaw",
            "type": "ns.Angle",
            "notes": "New angle, not a delta."
          }
        ]
      },
      {
        "name": "Update Section Blocks",
        "id": "0x4D",
        "resource": "section_blocks_update",
        "notes": "Chunk section position is encoded:",
        "fields": [
          {
            "name": "Chunk section position",
            "type": "ns.Long",
            "notes": "Chunk section coordinate (encoded chunk x and z with each 22 bits, and section y with 20 bits, from left to right)."
          },
          {
            "name": "Blocks",
            "type": "ns.PrefixedArray[ns.VarLong]",
            "notes": "Each entry is composed of the block state id, shifted left by 12, and the relative block position in the chunk section (4 bits for x, z, and y, from left to right)."
          }
        ]
      },
      {
        "name": "Select Advancements Tab",
        "id": "0x4E",
        "resource": "select_advancements_tab",
        "notes": "Sent by the server to indicate that the client should switch advancement tab. Sent either when the client switches tab in the GUI or when an advancement in another tab is made.\n\nThe Identifier must be one of the following if no custom data pack is loaded:",
        "fields": [
          {
            "name": "Identifier",
            "type": "ns.PrefixedOptional[ns.Identifier]",
            "notes": "See below."
          }
        ]
      },
      {
        "name": "Server Data",
        "id": "0x4F",
        "resource": "server_data",
        "notes": "",
        "fields": [
          {
            "name": "MOTD",
            "type": "ns.TextComponent",
            "notes": ""
          },
          {
            "name": "Icon",
            "type": "ns.PrefixedOptional[ns.PrefixedArray[ns.Byte]]",
            "notes": "Icon bytes in the PNG format."
          }
        ]
      },
      {
        "name": "Set Action Bar Text",
        "id": "0x50",
        "resource": "set_action_bar_text",
        "notes": "Displays a message above the hotbar. Equivalent to System Chat Message with Overlay set to true, except that chat message blocking isn't performed. Used by the\nvanilla server only to implement the /title command.",
        "fields": []
      },
      {
        "name": "Set Border Center",
        "id": "0x51",
        "resource": "set_border_center",
        "notes": "",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Border Lerp Size",
        "id": "0x52",
        "resource": "set_border_lerp_size",
        "notes": "",
        "fields": [
          {
            "name": "Old Diameter",
            "type": "ns.Double",
            "notes": "Current length of a single side of the world border, in meters."
          },
          {
            "name": "New Diameter",
            "type": "ns.Double",
            "notes": "Target length of a single side of the world border, in meters."
          },
          {
            "name": "Speed",
            "type": "ns.VarLong",
            "notes": "Number of real-time milli seconds until New Diameter is reached. It appears that vanilla server does not sync world border speed to game ticks, so it gets out of sync with server lag. If the\nworld border is not moving, this is set to 0."
          }
        ]
      },
      {
        "name": "Set Border Size",
        "id": "0x53",
        "resource": "set_border_size",
        "notes": "",
        "fields": [
          {
            "name": "Diameter",
            "type": "ns.Double",
            "notes": "Length of a single side of the world border, in meters."
          }
        ]
      },
      {
        "name": "Set Border Warning Delay",
        "id": "0x54",
        "resource": "set_border_warning_delay",
        "notes": "",
        "fields": [
          {
            "name": "Warning Time",
            "type": "ns.VarInt",
            "notes": "In seconds as set by /worldborder warning time ."
          }
        ]
      },
      {
        "name": "Set Border Warning Distance",
        "id": "0x55",
        "resource": "set_border_warning_distance",
        "notes": "",
        "fields": [
          {
            "name": "Warning Blocks",
            "type": "ns.VarInt",
            "notes": "In meters."
          }
        ]
      },
      {
        "name": "Set Camera",
        "id": "0x56",
        "resource": "set_camera",
        "notes": "Sets the entity that the player renders from. This is normally used when the player left-clicks an entity while in spectator mode.\n\nThe player's camera will move with the entity and look where it is looking. The entity is often another player, but can be any type of entity. The player is unable to move this entity (move packets will act as if\nthey are coming from the other entity).\n\nIf the given entity is not loaded by the player, this packet is ignored. To return control to the player, send this packet with their entity ID.\n\nThe vanilla server resets this (sends it back to the default entity) whenever the spectated entity is killed or the player sneaks, but only if they were spectating an entity. It also sends this packet whenever\nthe player switches out of spectator mode (even if they weren't spectating an entity).\n\nThe vanilla client also loads certain shaders for given entities:",
        "fields": [
          {
            "name": "Camera ID",
            "type": "ns.VarInt",
            "notes": "ID of the entity to set the client's camera to."
          }
        ]
      },
      {
        "name": "Set Center Chunk",
        "id": "0x57",
        "resource": "set_chunk_cache_center",
        "notes": "Sets the center position of the client's chunk loading area. The area is square-shaped, spanning 2 \u00d7 server view distance + 7 chunks on both axes (width, not radius!). Since the area's width is always an odd\nnumber, there is no ambiguity as to which chunk is the center.\n\nThe vanilla client never renders or simulates chunks located outside the loading area, but keeps them in memory (unless explicitly unloaded by the server while still in range), and only automatically unloads a\nchunk when another chunk is loaded at coordinates congruent to the old chunk's coordinates modulo (2 \u00d7 server view distance + 7). This means that a chunk may reappear after leaving and later re-entering the\nloading area through successive uses of this packet, unless it is replaced in the meantime by a different chunk in the same \"slot\".\n\nThe vanilla client ignores attempts to load or unload chunks located outside the loading area. This applies even to unloads targeting chunks that are still loaded, but currently located outside the loading area\n(per the previous paragraph).\n\nThe vanilla server does not rely on any specific behavior for chunks leaving the loading area, and custom clients need not replicate the above exactly. A client may instead choose to immediately unload any chunks\noutside the loading area, to use a different modulus, or to ignore the loading area completely and keep chunks loaded regardless of their location until the server requests to unload them. Servers aiming for\nmaximal interoperability should always explicitly unload any loaded chunks before they go outside the loading area.\n\nThe center chunk is normally the chunk the player is in, but apart from the implications on chunk loading, the (vanilla) client takes no issue with this not being the case. Indeed, as long as chunks are sent only\nwithin the default loading area centered on the world origin, it is not necessary to send this packet at all. This may be useful for servers with small bounded worlds, such as minigames, since it ensures chunks\nnever need to be resent after the client has joined, saving on bandwidth.\n\nThe vanilla server sends this packet whenever the player moves across a chunk border horizontally, and also (according to testing) for any integer change in the vertical axis, even if it doesn't go across a chunk\nsection border.",
        "fields": [
          {
            "name": "Chunk X",
            "type": "ns.VarInt",
            "notes": "Chunk X coordinate of the loading area center."
          },
          {
            "name": "Chunk Z",
            "type": "ns.VarInt",
            "notes": "Chunk Z coordinate of the loading area center."
          }
        ]
      },
      {
        "name": "Set Render Distance",
        "id": "0x58",
        "resource": "set_chunk_cache_radius",
        "notes": "Sent by the integrated singleplayer server when changing render distance. This packet is sent by the server when the client reappears in the overworld after leaving the end.",
        "fields": [
          {
            "name": "View Distance",
            "type": "ns.VarInt",
            "notes": "Render distance (2-32)."
          }
        ]
      },
      {
        "name": "Set Cursor Item",
        "id": "0x59",
        "resource": "set_cursor_item",
        "notes": "Replaces or sets the inventory item that's being dragged with the mouse.",
        "fields": [
          {
            "name": "Carried item",
            "type": "ns.Slot",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Default Spawn Position",
        "id": "0x5A",
        "resource": "set_default_spawn_position",
        "notes": "Sent by the server after login to specify the coordinates of the spawn point (the point at which players spawn at, and which the compass points to). It can be sent at any time to update the point compasses point\nat.\n\nThe client uses this as the default position of the player upon spawning, though it's a good idea to always override this default by sending Synchronize Player Position .\nWhen converting the position to floating point, 0.5 is added to the x and z coordinates and 1.0 to the y coordinate, so as to place the player centered on top of the specified block position.\n\nBefore receiving this packet, the client uses the default position 8, 64, 8, and angle 0.0 (resulting in a default player spawn position of 8.5, 65.0, 8.5).",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Spawn location."
          },
          {
            "name": "Angle",
            "type": "ns.Float",
            "notes": "The angle at which to respawn at."
          }
        ]
      },
      {
        "name": "Display Objective",
        "id": "0x5B",
        "resource": "set_display_objective",
        "notes": "This is sent to the client when it should display a scoreboard.",
        "fields": [
          {
            "name": "Position",
            "type": "ns.VarInt",
            "notes": "The position of the scoreboard. 0: list, 1: sidebar, 2: below name, 3 - 18: team specific sidebar, indexed as 3 + team color."
          },
          {
            "name": "Score Name",
            "type": "ns.String",
            "notes": "The unique name for the scoreboard to be displayed."
          }
        ]
      },
      {
        "name": "Set Entity Metadata",
        "id": "0x5C",
        "resource": "set_entity_data",
        "notes": "Updates one or more metadata properties for an existing entity. Any properties not\nincluded in the Metadata field are left unchanged.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Metadata",
            "type": "ns.EntityMetadata",
            "notes": ""
          }
        ]
      },
      {
        "name": "Link Entities",
        "id": "0x5D",
        "resource": "set_entity_link",
        "notes": "This packet is sent when an entity has been leashed to another entity.",
        "fields": [
          {
            "name": "Attached Entity ID",
            "type": "ns.Int",
            "notes": "Attached entity's EID."
          },
          {
            "name": "Holding Entity ID",
            "type": "ns.Int",
            "notes": "ID of the entity holding the lead. Set to -1 to detach."
          }
        ]
      },
      {
        "name": "Set Entity Velocity",
        "id": "0x5E",
        "resource": "set_entity_motion",
        "notes": "Velocity is in units of 1/8000 of a block per server tick (50ms); for example, -1343 would move (-1343 / 8000) = \u22120.167875 blocks per tick (or \u22123.3575 blocks per second).",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Velocity X",
            "type": "ns.Short",
            "notes": "Velocity on the X axis."
          },
          {
            "name": "Velocity Y",
            "type": "ns.Short",
            "notes": "Velocity on the Y axis."
          },
          {
            "name": "Velocity Z",
            "type": "ns.Short",
            "notes": "Velocity on the Z axis."
          }
        ]
      },
      {
        "name": "Set Equipment",
        "id": "0x5F",
        "resource": "set_equipment",
        "notes": "Equipment slot can be one of the following:",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "Entity's ID."
          },
          {
            "name": "Item",
            "type": "ns.Slot",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Experience",
        "id": "0x60",
        "resource": "set_experience",
        "notes": "Sent by the server when the client should change experience levels.",
        "fields": [
          {
            "name": "Experience bar",
            "type": "ns.Float",
            "notes": "Between 0 and 1."
          },
          {
            "name": "Level",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Total Experience",
            "type": "ns.VarInt",
            "notes": "See Experience#Leveling up on the Minecraft Wiki for Total Experience to Level conversion."
          }
        ]
      },
      {
        "name": "Set Health",
        "id": "0x61",
        "resource": "set_health",
        "notes": "Sent by the server to set the health of the player it is sent to.\n\nFood saturation acts as a food \u201covercharge\u201d. Food values will not decrease while the saturation is over zero. New players logging in or respawning\nautomatically get a saturation of 5.0. Eating food increases the saturation as well as the food bar.",
        "fields": [
          {
            "name": "Health",
            "type": "ns.Float",
            "notes": "0 or less = dead, 20 = full HP."
          },
          {
            "name": "Food",
            "type": "ns.VarInt",
            "notes": "0\u201320."
          },
          {
            "name": "Food Saturation",
            "type": "ns.Float",
            "notes": "Seems to vary from 0.0 to 5.0 in integer increments."
          }
        ]
      },
      {
        "name": "Set Held Item (clientbound)",
        "id": "0x62",
        "resource": "set_held_slot",
        "notes": "Sent to change the player's slot selection.",
        "fields": [
          {
            "name": "Slot",
            "type": "ns.VarInt",
            "notes": "The slot which the player has selected (0\u20138)."
          }
        ]
      },
      {
        "name": "Update Objectives",
        "id": "0x63",
        "resource": "set_objective",
        "notes": "This is sent to the client when it should create a new scoreboard objective or remove one.",
        "fields": [
          {
            "name": "Objective Name",
            "type": "ns.String",
            "notes": "A unique name for the objective."
          },
          {
            "name": "Mode",
            "type": "ns.Byte",
            "notes": "0 to create the scoreboard. 1 to remove the scoreboard. 2 to update the display text."
          },
          {
            "name": "Objective Value",
            "type": "ns.Optional[ns.TextComponent]",
            "notes": "Only if mode is 0 or 2.The text to be displayed for the score."
          },
          {
            "name": "Type",
            "type": "ns.Optional[ns.VarInt]",
            "notes": "Only if mode is 0 or 2. 0 = \"integer\", 1 = \"hearts\"."
          },
          {
            "name": "Has Number Format",
            "type": "ns.Optional[ns.Boolean]",
            "notes": "Only if mode is 0 or 2. Whether this objective has a set number format for the scores."
          },
          {
            "name": "Number Format",
            "type": "ns.Optional[ns.VarInt]",
            "notes": "Only if mode is 0 or 2 and the previous boolean is true. Determines how the score number should be formatted."
          },
          {
            "name": "0: blank",
            "type": "ns.nofields",
            "notes": "Show nothing."
          }
        ]
      },
      {
        "name": "Set Passengers",
        "id": "0x64",
        "resource": "set_passengers",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "Vehicle's EID."
          },
          {
            "name": "Passengers",
            "type": "ns.PrefixedArray[ns.VarInt]",
            "notes": "EIDs of entity's passengers."
          }
        ]
      },
      {
        "name": "Set Player Inventory Slot",
        "id": "0x65",
        "resource": "set_player_inventory",
        "notes": "",
        "fields": [
          {
            "name": "Slot",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Slot Data",
            "type": "ns.Slot",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Teams",
        "id": "0x66",
        "resource": "set_player_team",
        "notes": "Creates and updates teams.\n\nTeam Color: The color of a team defines how the names of the team members are visualized; any formatting code can be used. The following table lists all the possible values.",
        "fields": [
          {
            "name": "Team Name",
            "type": "ns.String",
            "notes": "A unique name for the team. (Shared with scoreboard)."
          },
          {
            "name": "Method",
            "type": "ns.Byte",
            "notes": "Determines the layout of the remaining packet."
          },
          {
            "name": "Friendly Flags",
            "type": "ns.Byte",
            "notes": "Bit mask. 0x01: Allow friendly fire, 0x02: can see invisible players on same team."
          },
          {
            "name": "Name Tag Visibility",
            "type": "ns.VarInt",
            "notes": "0 = ALWAYS, 1 = NEVER, 2 = HIDE_FOR_OTHER_TEAMS, 3 = HIDE_FOR_OWN_TEAMS"
          },
          {
            "name": "Collision Rule",
            "type": "ns.VarInt",
            "notes": "0 = ALWAYS, 1 = NEVER, 2 = PUSH_OTHER_TEAMS, 3 = PUSH_OWN_TEAM"
          },
          {
            "name": "Team Color",
            "type": "ns.VarInt",
            "notes": "Used to color the name of players on the team; see below."
          },
          {
            "name": "Team Prefix",
            "type": "ns.TextComponent",
            "notes": "Displayed before the names of players that are part of this team."
          },
          {
            "name": "Team Suffix",
            "type": "ns.TextComponent",
            "notes": "Displayed after the names of players that are part of this team."
          },
          {
            "name": "Entities",
            "type": "ns.PrefixedArray[ns.String]",
            "notes": "Identifiers for the entities in this team. For players, this is their username; for other entities, it is their UUID."
          },
          {
            "name": "Friendly Flags",
            "type": "ns.Byte",
            "notes": "Bit mask. 0x01: Allow friendly fire, 0x02: can see invisible entities on same team."
          },
          {
            "name": "Name Tag Visibility",
            "type": "ns.VarInt",
            "notes": "0 = ALWAYS, 1 = NEVER, 2 = HIDE_FOR_OTHER_TEAMS, 3 = HIDE_FOR_OWN_TEAMS"
          },
          {
            "name": "Collision Rule",
            "type": "ns.VarInt",
            "notes": "0 = ALWAYS, 1 = NEVER, 2 = PUSH_OTHER_TEAMS, 3 = PUSH_OWN_TEAM"
          },
          {
            "name": "Team Color",
            "type": "ns.VarInt",
            "notes": "Used to color the name of players on the team; see below."
          },
          {
            "name": "Team Prefix",
            "type": "ns.TextComponent",
            "notes": "Displayed before the names of players that are part of this team."
          },
          {
            "name": "Team Suffix",
            "type": "ns.TextComponent",
            "notes": "Displayed after the names of players that are part of this team."
          }
        ]
      },
      {
        "name": "Update Score",
        "id": "0x67",
        "resource": "set_score",
        "notes": "This is sent to the client when it should update a scoreboard item.",
        "fields": [
          {
            "name": "Entity Name",
            "type": "ns.String",
            "notes": "The entity whose score this is. For players, this is their username; for other entities, it is their UUID."
          },
          {
            "name": "Objective Name",
            "type": "ns.String",
            "notes": "The name of the objective the score belongs to."
          },
          {
            "name": "Value",
            "type": "ns.VarInt",
            "notes": "The score to be displayed next to the entry."
          },
          {
            "name": "Display Name",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": "The custom display name."
          },
          {
            "name": "Number Format",
            "type": "ns.PrefixedOptional[ns.VarInt]",
            "notes": "Determines how the score number should be formatted."
          },
          {
            "name": "0: blank",
            "type": "ns.nofields",
            "notes": "Show nothing."
          }
        ]
      },
      {
        "name": "Set Simulation Distance",
        "id": "0x68",
        "resource": "set_simulation_distance",
        "notes": "",
        "fields": [
          {
            "name": "Simulation Distance",
            "type": "ns.VarInt",
            "notes": "The distance that the client will process specific things, such as entities."
          }
        ]
      },
      {
        "name": "Set Subtitle Text",
        "id": "0x69",
        "resource": "set_subtitle_text",
        "notes": "",
        "fields": [
          {
            "name": "Subtitle Text",
            "type": "ns.TextComponent",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Time",
        "id": "0x6A",
        "resource": "set_time",
        "notes": "Time is based on ticks, where 20 ticks happen every second. There are 24000 ticks in a day, making Minecraft days exactly 20 minutes long.\n\nThe time of day is based on the timestamp modulo 24000. 0 is sunrise, 6000 is noon, 12000 is sunset, and 18000 is midnight.\n\nThe default SMP server increments the time by 20 every second.",
        "fields": [
          {
            "name": "World Age",
            "type": "ns.Long",
            "notes": "In ticks; not changed by server commands."
          },
          {
            "name": "Time of day",
            "type": "ns.Long",
            "notes": "The world (or region) time, in ticks."
          },
          {
            "name": "Time of day increasing",
            "type": "ns.Boolean",
            "notes": "If true, the client should automatically advance the time of day according to its ticking rate."
          }
        ]
      },
      {
        "name": "Set Title Text",
        "id": "0x6B",
        "resource": "set_title_text",
        "notes": "",
        "fields": [
          {
            "name": "Title Text",
            "type": "ns.TextComponent",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Title Animation Times",
        "id": "0x6C",
        "resource": "set_titles_animation",
        "notes": "",
        "fields": [
          {
            "name": "Fade In",
            "type": "ns.Int",
            "notes": "Ticks to spend fading in."
          },
          {
            "name": "Stay",
            "type": "ns.Int",
            "notes": "Ticks to keep the title displayed."
          },
          {
            "name": "Fade Out",
            "type": "ns.Int",
            "notes": "Ticks to spend fading out, not when to start fading out."
          }
        ]
      },
      {
        "name": "Entity Sound Effect",
        "id": "0x6D",
        "resource": "sound_entity",
        "notes": "Plays a sound effect from an entity, either by hardcoded ID or Identifier. Sound IDs and names can be found here .",
        "fields": [
          {
            "name": "Sound Event",
            "type": "ns.Or[ns.Identifier, ns.SoundEvent]",
            "notes": "ID in the minecraft:sound_event registry, or an inline definition."
          },
          {
            "name": "Sound Category",
            "type": "ns.VarInt",
            "notes": "The category that this sound will be played from ( current categories )."
          },
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Volume",
            "type": "ns.Float",
            "notes": "1.0 is 100%, capped between 0.0 and 1.0 by vanilla clients."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Float between 0.5 and 2.0 by vanilla clients."
          },
          {
            "name": "Seed",
            "type": "ns.Long",
            "notes": "Seed used to pick sound variant."
          }
        ]
      },
      {
        "name": "Sound Effect",
        "id": "0x6E",
        "resource": "sound",
        "notes": "Plays a sound effect at the given location, either by hardcoded ID or Identifier. Sound IDs and names can be found here .",
        "fields": [
          {
            "name": "Sound Event",
            "type": "ns.Or[ns.Identifier, ns.SoundEvent]",
            "notes": "ID in the minecraft:sound_event registry, or an inline definition."
          },
          {
            "name": "Sound Category",
            "type": "ns.VarInt",
            "notes": "The category that this sound will be played from ( current categories )."
          },
          {
            "name": "Effect Position X",
            "type": "ns.Int",
            "notes": "Effect X multiplied by 8 ( fixed-point number with only 3 bits dedicated to the fractional part)."
          },
          {
            "name": "Effect Position Y",
            "type": "ns.Int",
            "notes": "Effect Y multiplied by 8 ( fixed-point number with only 3 bits dedicated to the fractional part)."
          },
          {
            "name": "Effect Position Z",
            "type": "ns.Int",
            "notes": "Effect Z multiplied by 8 ( fixed-point number with only 3 bits dedicated to the fractional part)."
          },
          {
            "name": "Volume",
            "type": "ns.Float",
            "notes": "1.0 is 100%, capped between 0.0 and 1.0 by vanilla clients."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Float between 0.5 and 2.0 by vanilla clients."
          },
          {
            "name": "Seed",
            "type": "ns.Long",
            "notes": "Seed used to pick sound variant."
          }
        ]
      },
      {
        "name": "Start Configuration",
        "id": "0x6F",
        "resource": "start_configuration",
        "notes": "Sent during gameplay in order to redo the configuration process. The client must respond with Acknowledge Configuration for the process to start.\n\nThis packet switches the connection state to configuration .",
        "fields": []
      },
      {
        "name": "Stop Sound",
        "id": "0x70",
        "resource": "stop_sound",
        "notes": "Categories:",
        "fields": [
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Controls which fields are present."
          },
          {
            "name": "Source",
            "type": "ns.Optional[ns.VarInt]",
            "notes": "Only if flags is 3 or 1 (bit mask 0x1). See below. If not present, then sounds from all sources are cleared."
          },
          {
            "name": "Sound",
            "type": "ns.Optional[ns.Identifier]",
            "notes": "Only if flags is 2 or 3 (bit mask 0x2). A sound effect name, see Custom Sound Effect . If not present, then all sounds are cleared."
          }
        ]
      },
      {
        "name": "Store Cookie (play)",
        "id": "0x71",
        "resource": "store_cookie",
        "notes": "Stores some arbitrary data on the client, which persists between server transfers. The vanilla client only accepts cookies of up to 5 kiB in size.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          },
          {
            "name": "Payload",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "The data of the cookie."
          }
        ]
      },
      {
        "name": "System Chat Message",
        "id": "0x72",
        "resource": "system_chat",
        "notes": "Sends the client a raw system message.",
        "fields": [
          {
            "name": "Content",
            "type": "ns.TextComponent",
            "notes": "Limited to 262144 bytes."
          },
          {
            "name": "Overlay",
            "type": "ns.Boolean",
            "notes": "Whether the message is an actionbar or chat message. See also #Set Action Bar Text ."
          }
        ]
      },
      {
        "name": "Set Tab List Header And Footer",
        "id": "0x73",
        "resource": "tab_list",
        "notes": "This packet may be used by custom servers to display additional information above/below the player list. It is never sent by the vanilla server.",
        "fields": [
          {
            "name": "Header",
            "type": "ns.TextComponent",
            "notes": "To remove the header, send a empty text component: {\"text\":\"\"} ."
          },
          {
            "name": "Footer",
            "type": "ns.TextComponent",
            "notes": "To remove the footer, send a empty text component: {\"text\":\"\"} ."
          }
        ]
      },
      {
        "name": "Tag Query Response",
        "id": "0x74",
        "resource": "tag_query",
        "notes": "Sent in response to Query Block Entity Tag or Query Entity Tag .",
        "fields": [
          {
            "name": "Transaction ID",
            "type": "ns.VarInt",
            "notes": "Can be compared to the one sent in the original query packet."
          },
          {
            "name": "NBT",
            "type": "ns.NBT",
            "notes": "The NBT of the block or entity. May be a TAG_END (0) in which case no NBT is present."
          }
        ]
      },
      {
        "name": "Pickup Item",
        "id": "0x75",
        "resource": "take_item_entity",
        "notes": "Sent by the server when someone picks up an item lying on the ground \u2014 its sole purpose appears to be the animation of the item flying towards you. It doesn't destroy the entity in the client memory, and it\ndoesn't add it to your inventory. The server only checks for items to be picked up after each Set Player Position (and Set Player Position And Rotation ) packet sent by the client. The collector entity can be any entity; it does not have to be a player. The collected entity also can\nbe any entity, but the vanilla server only uses this for items, experience orbs, and the different varieties of arrows.",
        "fields": [
          {
            "name": "Collected Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Collector Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Pickup Item Count",
            "type": "ns.VarInt",
            "notes": "Seems to be 1 for XP orbs, otherwise the number of items in the stack."
          }
        ]
      },
      {
        "name": "Synchronize Vehicle Position",
        "id": "0x76",
        "resource": "teleport_entity",
        "notes": "Teleports the entity on the client without changing the reference point of movement deltas in future Update Entity Position packets. Seems to be used to make relative\nadjustments to vehicle positions; more information needed.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity X",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Y",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Velocity Z",
            "type": "ns.Double",
            "notes": ""
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Rotation on the Y axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Rotation on the Y axis, in degrees."
          },
          {
            "name": "Flags",
            "type": "ns.TeleportFlags",
            "notes": ""
          },
          {
            "name": "On Ground",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Test Instance Block Status",
        "id": "0x77",
        "resource": "test_instance_block_status",
        "notes": "Updates the status of the currently open Test Instance Block screen, if any.",
        "fields": [
          {
            "name": "Status",
            "type": "ns.TextComponent",
            "notes": ""
          },
          {
            "name": "Has Size",
            "type": "ns.Boolean",
            "notes": ""
          },
          {
            "name": "Size X",
            "type": "ns.Optional[ns.Double]",
            "notes": "Only present if Has Size is true."
          },
          {
            "name": "Size Y",
            "type": "ns.Optional[ns.Double]",
            "notes": "Only present if Has Size is true."
          },
          {
            "name": "Size Z",
            "type": "ns.Optional[ns.Double]",
            "notes": "Only present if Has Size is true."
          }
        ]
      },
      {
        "name": "Set Ticking State",
        "id": "0x78",
        "resource": "ticking_state",
        "notes": "Used to adjust the ticking rate of the client, and whether it's frozen.",
        "fields": [
          {
            "name": "Tick rate",
            "type": "ns.Float",
            "notes": ""
          },
          {
            "name": "Is frozen",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Step Tick",
        "id": "0x79",
        "resource": "ticking_step",
        "notes": "Advances the client processing by the specified number of ticks. Has no effect unless client ticking is frozen.",
        "fields": [
          {
            "name": "Tick steps",
            "type": "ns.VarInt",
            "notes": ""
          }
        ]
      },
      {
        "name": "Transfer (play)",
        "id": "0x7A",
        "resource": "transfer",
        "notes": "Notifies the client that it should transfer to the given server. Cookies previously stored are preserved between server transfers.",
        "fields": [
          {
            "name": "Host",
            "type": "ns.String",
            "notes": "The hostname or IP of the server."
          },
          {
            "name": "Port",
            "type": "ns.VarInt",
            "notes": "The port of the server."
          }
        ]
      },
      {
        "name": "Update Advancements",
        "id": "0x7B",
        "resource": "update_advancements",
        "notes": "Advancement structure:",
        "fields": [
          {
            "name": "Reset/Clear",
            "type": "ns.Boolean",
            "notes": "Whether to reset/clear the current advancements."
          },
          {
            "name": "Value",
            "type": "ns.Advancement",
            "notes": "See below"
          },
          {
            "name": "Identifiers",
            "type": "ns.PrefixedArray[ns.Identifier]",
            "notes": "The identifiers of the advancements that should be removed."
          },
          {
            "name": "Value",
            "type": "ns.Advancementprogress",
            "notes": "See below."
          },
          {
            "name": "Show advancements",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Attributes",
        "id": "0x7C",
        "resource": "update_attributes",
        "notes": "Sets attributes on the given entity.\n\nModifier Data structure:",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Value",
            "type": "ns.Double",
            "notes": "See below."
          },
          {
            "name": "Modifiers",
            "type": "ns.PrefixedModifierArrayData",
            "notes": "See Attribute#Modifiers . Modifier Data defined below."
          }
        ]
      },
      {
        "name": "Entity Effect",
        "id": "0x7D",
        "resource": "update_mob_effect",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Effect ID",
            "type": "ns.VarInt",
            "notes": "See this table ."
          },
          {
            "name": "Amplifier",
            "type": "ns.VarInt",
            "notes": "Vanilla client displays effect level as Amplifier + 1."
          },
          {
            "name": "Duration",
            "type": "ns.VarInt",
            "notes": "Duration in ticks. (-1 for infinite)"
          },
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit field, see below."
          }
        ]
      },
      {
        "name": "Update Recipes",
        "id": "0x7E",
        "resource": "update_recipes",
        "notes": "",
        "fields": [
          {
            "name": "Property Sets",
            "type": "ns.PrefixedArray[struct { PropertySetId ns.Identifier; Items ns.PrefixedArray[ns.VarInt] }]",
            "notes": "Prefixed Array"
          },
          {
            "name": "Slot Display",
            "type": "ns.SlotDisplay",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Tags (play)",
        "id": "0x7F",
        "resource": "update_tags",
        "notes": "A tag looks like this:",
        "fields": [
          {
            "name": "Registry to tags map",
            "type": "ns.PrefixedArray[struct { Registry ns.Identifier; Tags ns.PrefixedTagArray // FIXME: See below }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Projectile Power",
        "id": "0x80",
        "resource": "projectile_power",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Power",
            "type": "ns.Double",
            "notes": ""
          }
        ]
      },
      {
        "name": "Custom Report Details",
        "id": "0x81",
        "resource": "custom_report_details",
        "notes": "Contains a list of key-value text entries that are included in any crash or disconnection report generated during connection to the server.",
        "fields": [
          {
            "name": "Details",
            "type": "ns.PrefixedArray[struct { Title ns.String; Description ns.String }]",
            "notes": "Prefixed Array (32)"
          }
        ]
      },
      {
        "name": "Server Links",
        "id": "0x82",
        "resource": "server_links",
        "notes": "This packet contains a list of links that the vanilla client will display in the menu available from the pause menu. Link labels can be built-in or custom (i.e., any text).",
        "fields": [
          {
            "name": "Links",
            "type": "ns.PrefixedArray[struct { IsBuilt-in ns.Boolean; Label ns.VarIntTextComponent; Url ns.String }]",
            "notes": "Prefixed Array"
          }
        ]
      },
      {
        "name": "Waypoint",
        "id": "0x83",
        "resource": "waypoint",
        "notes": "Adds, removes, or updates an entry that will be tracked on the player locator bar.",
        "fields": [
          {
            "name": "Operation",
            "type": "ns.VarInt",
            "notes": "0: track, 1: untrack, 2: update."
          },
          {
            "name": "Identifier",
            "type": "ns.Or[ns.UUID, ns.String]",
            "notes": "Something that uniquely identifies this specific waypoint."
          },
          {
            "name": "Icon style",
            "type": "ns.Identifier",
            "notes": "Path to the waypoint style JSON: assets/<namespace>/waypoint_style/<value>.json."
          },
          {
            "name": "Waypoint type",
            "type": "ns.VarInt",
            "notes": "Defines how the following field is read."
          }
        ]
      },
      {
        "name": "Clear Dialog (play)",
        "id": "0x84",
        "resource": "clear_dialog",
        "notes": "If we're currently in a dialog screen, then this removes the current screen and switches back to the previous one.",
        "fields": []
      },
      {
        "name": "Show Dialog (play)",
        "id": "0x85",
        "resource": "show_dialog",
        "notes": "Show a custom dialog screen to the client.",
        "fields": [
          {
            "name": "Dialog",
            "type": "ns.Or[ns.Identifier, ns.NBT]",
            "notes": "ID in the minecraft:dialog registry, or an inline definition as described at Registry_data#Dialog ."
          }
        ]
      }
    ],
    "serverbound": [
      {
        "name": "Confirm Teleportation",
        "id": "0x00",
        "resource": "accept_teleportation",
        "notes": "Sent by client as confirmation of Synchronize Player Position .",
        "fields": [
          {
            "name": "Teleport ID",
            "type": "ns.VarInt",
            "notes": "The ID given by the Synchronize Player Position packet."
          }
        ]
      },
      {
        "name": "Query Block Entity Tag",
        "id": "0x01",
        "resource": "block_entity_tag_query",
        "notes": "Used when F3 + I is pressed while looking at a block.",
        "fields": [
          {
            "name": "Transaction ID",
            "type": "ns.VarInt",
            "notes": "An incremental ID so that the client can verify that the response matches."
          },
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "The location of the block to check."
          }
        ]
      },
      {
        "name": "Bundle Item Selected",
        "id": "0x02",
        "resource": "bundle_item_selected",
        "notes": "",
        "fields": [
          {
            "name": "Slot of Bundle",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Slot in Bundle",
            "type": "ns.VarInt",
            "notes": ""
          }
        ]
      },
      {
        "name": "Change Difficulty",
        "id": "0x03",
        "resource": "change_difficulty",
        "notes": "Must have at least op level 2 to use. Appears to only be used on singleplayer; the difficulty buttons are still disabled in multiplayer.",
        "fields": [
          {
            "name": "New difficulty",
            "type": "ns.UnsignedByte",
            "notes": "0: peaceful, 1: easy, 2: normal, 3: hard."
          }
        ]
      },
      {
        "name": "Change Game Mode",
        "id": "0x04",
        "resource": "change_game_mode",
        "notes": "Requests for the server to update our game mode. Has no effect on vanilla servers if the client doesn't have the required permissions.",
        "fields": [
          {
            "name": "Game mode",
            "type": "ns.VarInt",
            "notes": "0: survival, 1: creative, 2: adventure, 3: spectator."
          }
        ]
      },
      {
        "name": "Acknowledge Message",
        "id": "0x05",
        "resource": "chat_ack",
        "notes": "",
        "fields": [
          {
            "name": "Message Count",
            "type": "ns.VarInt",
            "notes": ""
          }
        ]
      },
      {
        "name": "Chat Command",
        "id": "0x06",
        "resource": "chat_command",
        "notes": "",
        "fields": [
          {
            "name": "Command",
            "type": "ns.String",
            "notes": "The command typed by the client excluding the / ."
          }
        ]
      },
      {
        "name": "Signed Chat Command",
        "id": "0x07",
        "resource": "chat_command_signed",
        "notes": "",
        "fields": [
          {
            "name": "Command",
            "type": "ns.String",
            "notes": "The command typed by the client excluding the / ."
          },
          {
            "name": "Timestamp",
            "type": "ns.Long",
            "notes": "The timestamp that the command was executed."
          },
          {
            "name": "Salt",
            "type": "ns.Long",
            "notes": "The salt for the following argument signatures."
          },
          {
            "name": "Signature",
            "type": "ns.ByteArray",
            "notes": "The signature that verifies the argument. Always 256 bytes and is not length-prefixed."
          },
          {
            "name": "Message Count",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Acknowledged",
            "type": "ns.FixedBitSet",
            "notes": ""
          },
          {
            "name": "Checksum",
            "type": "ns.Byte",
            "notes": ""
          }
        ]
      },
      {
        "name": "Chat Message",
        "id": "0x08",
        "resource": "chat",
        "notes": "Used to send a chat message to the server. The message may not be longer than 256 characters or else the server will kick the client.\n\nThe server will broadcast a Player Chat Message packet with Chat Type minecraft:chat to all players that haven't disabled chat (including the player that sent the\nmessage). See Chat#Processing chat for more information.",
        "fields": [
          {
            "name": "Message",
            "type": "ns.String",
            "notes": "Content of the message"
          },
          {
            "name": "Timestamp",
            "type": "ns.Long",
            "notes": "Number of milliseconds since the epoch (1 Jan 1970, midnight, UTC)"
          },
          {
            "name": "Salt",
            "type": "ns.Long",
            "notes": "The salt used to verify the signature hash. Randomly generated by the client"
          },
          {
            "name": "Signature",
            "type": "ns.PrefixedOptional[ns.ByteArray]",
            "notes": "The signature used to verify the chat message's authentication. When present, always 256 bytes and not length-prefixed. This is a SHA256 with RSA digital signature computed over the following: The number 1 as a 4-byte int. Always 00 00 00 01. The player's 16 byte UUID. The chat session (a 16 byte UUID generated randomly generated by the client). The index of the message within this chat session as a 4-byte int. First message is 0, next message is 1, etc. Incremented each time the client sends a chat message. The salt (from above) as a 8-byte long. The timestamp (from above) converted from millisecods to seconds, so divide by 1000, as a 8-byte long. The length of the message in bytes (from above) as a 4-byte int. The message bytes. The number of messages in the last seen set, as a 4-byte int. Always in the range [0,20]. For each message in the last seen set, from oldest to newest, the 256 byte signature of that message. The client's chat private key is used for the message signature."
          },
          {
            "name": "Message Count",
            "type": "ns.VarInt",
            "notes": "Number of signed clientbound chat messages the client has seen from the server since the last serverbound chat message from this client. The server will use this to update its last seen list for the\nclient."
          },
          {
            "name": "Acknowledged",
            "type": "ns.FixedBitSet",
            "notes": "Bitmask of which message signatures from the last seen set were used to sign this message. The most recent is the highest bit. If there are less than 20 messages in the last seen set, the lower\nbits will be zeros."
          },
          {
            "name": "Checksum",
            "type": "ns.Byte",
            "notes": ""
          }
        ]
      },
      {
        "name": "Player Session",
        "id": "0x09",
        "resource": "chat_session_update",
        "notes": "",
        "fields": [
          {
            "name": "Session Id",
            "type": "ns.UUID",
            "notes": ""
          },
          {
            "name": "Public Key",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "A byte array of an X.509-encoded public key."
          },
          {
            "name": "Key Signature",
            "type": "ns.PrefixedArray[ns.Byte]",
            "notes": "The signature consists of the player UUID, the key expiration timestamp, and the public key data. These values are hashed using SHA-1 and signed using Mojang's private RSA key."
          }
        ]
      },
      {
        "name": "Chunk Batch Received",
        "id": "0x0A",
        "resource": "chunk_batch_received",
        "notes": "Notifies the server that the chunk batch has been received by the client. The server uses the value sent in this packet to adjust the number of chunks to be sent in a batch.\n\nThe vanilla server will stop sending further chunk data until the client acknowledges the sent chunk batch. After the first acknowledgement, the server adjusts this number to allow up to 10 unacknowledged\nbatches.",
        "fields": [
          {
            "name": "Chunks per tick",
            "type": "ns.Float",
            "notes": "Desired chunks per tick."
          }
        ]
      },
      {
        "name": "Client Status",
        "id": "0x0B",
        "resource": "client_command",
        "notes": "Action ID values:",
        "fields": [
          {
            "name": "Action ID",
            "type": "ns.VarInt",
            "notes": "See below"
          }
        ]
      },
      {
        "name": "Client Tick End",
        "id": "0x0C",
        "resource": "client_tick_end",
        "notes": "",
        "fields": []
      },
      {
        "name": "Client Information (play)",
        "id": "0x0D",
        "resource": "client_information",
        "notes": "Sent when the player connects, or when settings are changed.\n\nDisplayed Skin Parts flags:",
        "fields": [
          {
            "name": "Locale",
            "type": "ns.String",
            "notes": "e.g. en_GB ."
          },
          {
            "name": "View Distance",
            "type": "ns.Byte",
            "notes": "Client-side render distance, in chunks."
          },
          {
            "name": "Chat Mode",
            "type": "ns.VarInt",
            "notes": "0: enabled, 1: commands only, 2: hidden. See Chat#Client chat mode for more information."
          },
          {
            "name": "Chat Colors",
            "type": "ns.Boolean",
            "notes": "\u201cColors\u201d multiplayer setting. The vanilla server stores this value but does nothing with it (see MC-64867 ). Third-party servers such as Hypixel disable all coloring in\nchat and system messages when it is false."
          },
          {
            "name": "Displayed Skin Parts",
            "type": "ns.UnsignedByte",
            "notes": "Bit mask, see below."
          },
          {
            "name": "Main Hand",
            "type": "ns.VarInt",
            "notes": "0: Left, 1: Right."
          },
          {
            "name": "Enable text filtering",
            "type": "ns.Boolean",
            "notes": "Enables filtering of text on signs and written book titles. The vanilla client sets this according to the profanityFilterPreferences.profanityFilterOn account attribute indicated by the /player/attributes Mojang API endpoint . In offline mode it is always false."
          },
          {
            "name": "Allow server listings",
            "type": "ns.Boolean",
            "notes": "Servers usually list online players, this option should let you not show up in that list."
          },
          {
            "name": "Particle Status",
            "type": "ns.VarInt",
            "notes": "0: all, 1: decreased, 2: minimal"
          }
        ]
      },
      {
        "name": "Command Suggestions Request",
        "id": "0x0E",
        "resource": "command_suggestion",
        "notes": "Sent when the client needs to tab-complete a minecraft:ask_server suggestion type.",
        "fields": [
          {
            "name": "Transaction Id",
            "type": "ns.VarInt",
            "notes": "The id of the transaction that the server will send back to the client in the response of this packet. Client generates this and increments it each time it sends another tab completion that doesn't\nget a response."
          },
          {
            "name": "Text",
            "type": "ns.String",
            "notes": "All the text behind the cursor including the / (e.g. to the left of the cursor in left-to-right languages like English)."
          }
        ]
      },
      {
        "name": "Acknowledge Configuration",
        "id": "0x0F",
        "resource": "configuration_acknowledged",
        "notes": "Sent by the client upon receiving a Start Configuration packet from the server.\n\nThis packet switches the connection state to configuration .",
        "fields": []
      },
      {
        "name": "Click Container Button",
        "id": "0x10",
        "resource": "container_button_click",
        "notes": "Used when clicking on window buttons. Until 1.14, this was only used by enchantment tables.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "The ID of the window sent by Open Screen ."
          },
          {
            "name": "Button ID",
            "type": "ns.VarInt",
            "notes": "Meaning depends on window type; see below."
          }
        ]
      },
      {
        "name": "Click Container",
        "id": "0x11",
        "resource": "container_click",
        "notes": "This packet is sent by the client when the player clicks on a slot in a window.\n\nSee Inventory for further information about how slots are indexed.\n\nAfter performing the action, the server compares the results to the slot change information included in the packet, as applied on top of the server's view of the container's state prior to the action. For any\nslots that do not match, it sends Set Container Slot packets containing the correct results. If State ID does not match the last ID sent by the server, it will instead send a\nfull Set Container Content to resynchronize the client.\n\nWhen right-clicking on a stack of items, half the stack will be picked up and half left in the slot. If the stack is an odd number, the half left in the slot will be smaller of the amounts.\n\nThe distinct type of click performed by the client is determined by the combination of the Mode and Button fields.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "The ID of the window which was clicked. 0 for player inventory. The server ignores any packets targeting a Window ID other than the current one, including ignoring 0 when any other window is open."
          },
          {
            "name": "State ID",
            "type": "ns.VarInt",
            "notes": "The last received State ID from either a Set Container Slot or a Set Container Content packet."
          },
          {
            "name": "Slot",
            "type": "ns.Short",
            "notes": "The clicked slot number, see below."
          },
          {
            "name": "Button",
            "type": "ns.Byte",
            "notes": "The button used in the click, see below."
          },
          {
            "name": "Mode",
            "type": "ns.VarInt",
            "notes": "Inventory operation mode, see below."
          },
          {
            "name": "Slot data",
            "type": "ns.HashedSlot",
            "notes": "New data for this slot, in the client's opinion; see below."
          },
          {
            "name": "Carried item",
            "type": "ns.HashedSlot",
            "notes": "Item carried by the cursor. Has to be empty (item ID = -1) for drop mode, otherwise nothing will happen."
          }
        ]
      },
      {
        "name": "Close Container",
        "id": "0x12",
        "resource": "container_close",
        "notes": "This packet is sent by the client when closing a window.\n\nvanilla clients send a Close Window packet with Window ID 0 to close their inventory even though there is never an Open Screen packet for the inventory.",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "This is the ID of the window that was closed. 0 for player inventory."
          }
        ]
      },
      {
        "name": "Change Container Slot State",
        "id": "0x13",
        "resource": "container_slot_state_changed",
        "notes": "This packet is sent by the client when toggling the state of a Crafter.",
        "fields": [
          {
            "name": "Slot ID",
            "type": "ns.VarInt",
            "notes": "This is the ID of the slot that was changed."
          },
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": "This is the ID of the window that was changed."
          },
          {
            "name": "State",
            "type": "ns.Boolean",
            "notes": "The new state of the slot. True for enabled, false for disabled."
          }
        ]
      },
      {
        "name": "Cookie Response (play)",
        "id": "0x14",
        "resource": "cookie_response",
        "notes": "Response to a Cookie Request (play) from the server. The vanilla server only accepts responses of up to 5 kiB in size.",
        "fields": [
          {
            "name": "Key",
            "type": "ns.Identifier",
            "notes": "The identifier of the cookie."
          },
          {
            "name": "Payload",
            "type": "ns.PrefixedOptional[ns.PrefixedArray[ns.Byte]]",
            "notes": "The data of the cookie."
          }
        ]
      },
      {
        "name": "Serverbound Plugin Message (play)",
        "id": "0x15",
        "resource": "custom_payload",
        "notes": "Mods and plugins can use this to send their data. Minecraft itself uses some plugin channels . These internal channels are in the minecraft namespace.\n\nMore documentation on this: https://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/\n\nNote that the length of Data is known only from the packet length, since the packet has no length field of any kind.\n\nIn vanilla servers, the maximum data length is 32767 bytes.",
        "fields": [
          {
            "name": "Channel",
            "type": "ns.Identifier",
            "notes": "Name of the plugin channel used to send the\ndata."
          },
          {
            "name": "Data",
            "type": "ns.ByteArray",
            "notes": "Any data, depending on the channel. minecraft: channels are documented here . The length of this array must be inferred\nfrom the packet length."
          }
        ]
      },
      {
        "name": "Debug Sample Subscription",
        "id": "0x16",
        "resource": "debug_sample_subscription",
        "notes": "Subscribes to the specified type of debug sample data, which is then sent periodically to the client via Debug Sample .\n\nThe subscription is retained for 10 seconds (the vanilla server checks that both 10.001 real-time seconds and 201 ticks have elapsed), after which the client is automatically unsubscribed. The vanilla client\nresends this packet every 5 seconds to keep up the subscription.\n\nThe vanilla server only allows subscriptions from players that are server operators.",
        "fields": [
          {
            "name": "Sample Type",
            "type": "ns.VarInt",
            "notes": "The type of debug sample to subscribe to. Can be one of the following: 0 - Tick time"
          }
        ]
      },
      {
        "name": "Edit Book",
        "id": "0x17",
        "resource": "edit_book",
        "notes": "",
        "fields": [
          {
            "name": "Slot",
            "type": "ns.VarInt",
            "notes": "The hotbar slot where the written book is located"
          },
          {
            "name": "Entries",
            "type": "ns.PrefixedStringArray // Size: 100",
            "notes": "Text from each page. Maximum string length is 1024 chars."
          },
          {
            "name": "Title",
            "type": "ns.PrefixedOptional[ns.String]",
            "notes": "Title of book. Present if book is being signed, not present if book is being edited."
          }
        ]
      },
      {
        "name": "Query Entity Tag",
        "id": "0x18",
        "resource": "entity_tag_query",
        "notes": "Used when F3 + I is pressed while looking at an entity.",
        "fields": [
          {
            "name": "Transaction ID",
            "type": "ns.VarInt",
            "notes": "An incremental ID so that the client can verify that the response matches."
          },
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "The ID of the entity to query."
          }
        ]
      },
      {
        "name": "Interact",
        "id": "0x19",
        "resource": "interact",
        "notes": "This packet is sent from the client to the server when the client attacks or right-clicks another entity (a player, minecart, etc).\n\nA vanilla server only accepts this packet if the entity being attacked/used is visible without obstruction and within a 4-unit radius of the player's position.\n\nThe target X, Y, and Z fields represent the difference between the vector location of the cursor at the time of the packet and the entity's position.\n\nNote that middle-click in creative mode is interpreted by the client and sent as a Set Creative Mode Slot packet instead.\n\nInteraction with the ender dragon is an odd special case characteristic of release deadline\u2013driven design. 8 consecutive entity IDs following the dragon's ID ( id + 1, id + 2, ..., id + 8) are reserved for the 8 hitboxes that make up the dragon:",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "The ID of the entity to interact. Note the special case described below."
          },
          {
            "name": "Type",
            "type": "ns.VarInt",
            "notes": "0: interact, 1: attack, 2: interact at."
          },
          {
            "name": "Target X",
            "type": "ns.Optional[ns.Float]",
            "notes": "Only if Type is interact at."
          },
          {
            "name": "Target Y",
            "type": "ns.Optional[ns.Float]",
            "notes": "Only if Type is interact at."
          },
          {
            "name": "Target Z",
            "type": "ns.Optional[ns.Float]",
            "notes": "Only if Type is interact at."
          },
          {
            "name": "Hand",
            "type": "ns.Optional[ns.VarInt]",
            "notes": "Only if Type is interact or interact at; 0: main hand, 1: off hand."
          },
          {
            "name": "Sneak Key Pressed",
            "type": "ns.Boolean",
            "notes": "If the client is pressing the sneak key. Has the same effect as a Player Command Press/Release sneak key preceding the interaction, and the state is permanently changed."
          }
        ]
      },
      {
        "name": "Jigsaw Generate",
        "id": "0x1A",
        "resource": "jigsaw_generate",
        "notes": "Sent when Generate is pressed on the Jigsaw Block interface.",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block entity location."
          },
          {
            "name": "Levels",
            "type": "ns.VarInt",
            "notes": "Value of the levels slider/max depth to generate."
          },
          {
            "name": "Keep Jigsaws",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Serverbound Keep Alive (play)",
        "id": "0x1B",
        "resource": "keep_alive",
        "notes": "The server will frequently send out a keep-alive (see Clientbound Keep Alive ), each containing a random ID. The client must respond with the same packet.",
        "fields": [
          {
            "name": "Keep Alive ID",
            "type": "ns.Long",
            "notes": ""
          }
        ]
      },
      {
        "name": "Lock Difficulty",
        "id": "0x1C",
        "resource": "lock_difficulty",
        "notes": "Must have at least op level 2 to use. Appears to only be used on singleplayer; the difficulty buttons are still disabled in multiplayer.",
        "fields": [
          {
            "name": "Locked",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Player Position",
        "id": "0x1D",
        "resource": "move_player_pos",
        "notes": "",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": "Absolute position."
          },
          {
            "name": "Feet Y",
            "type": "ns.Double",
            "notes": "Absolute feet position, normally Head Y - 1.62."
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": "Absolute position."
          },
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit field: 0x01: on ground, 0x02: pushing against wall."
          }
        ]
      },
      {
        "name": "Set Player Position and Rotation",
        "id": "0x1E",
        "resource": "move_player_pos_rot",
        "notes": "A combination of Move Player Rotation and Move Player Position .",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": "Absolute position."
          },
          {
            "name": "Feet Y",
            "type": "ns.Double",
            "notes": "Absolute feet position, normally Head Y - 1.62."
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": "Absolute position."
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Absolute rotation on the X Axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Absolute rotation on the Y Axis, in degrees."
          },
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit field: 0x01: on ground, 0x02: pushing against wall."
          }
        ]
      },
      {
        "name": "Set Player Rotation",
        "id": "0x1F",
        "resource": "move_player_rot",
        "notes": "",
        "fields": [
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Absolute rotation on the X Axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Absolute rotation on the Y Axis, in degrees."
          },
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit field: 0x01: on ground, 0x02: pushing against wall."
          }
        ]
      },
      {
        "name": "Set Player Movement Flags",
        "id": "0x20",
        "resource": "move_player_status_only",
        "notes": "This packet as well as Set Player Position , Set Player Rotation , and Set Player Position and Rotation are called the \u201cserverbound movement packets\u201d. Vanilla clients will send Move Player Position once every 20 ticks even for a\nstationary player.\n\nThis packet is used to indicate whether the player is on ground (walking/swimming), or airborne (jumping/falling).\n\nWhen dropping from sufficient height, fall damage is applied when this state goes from false to true. The amount of damage applied is based on the point where it last changed from true to false. Note that there\nare several movement related packets containing this state.",
        "fields": [
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit field: 0x01: on ground, 0x02: pushing against wall."
          }
        ]
      },
      {
        "name": "Move Vehicle",
        "id": "0x21",
        "resource": "move_vehicle",
        "notes": "Sent when a player moves in a vehicle. Fields are the same as in Set Player Position and Rotation . Note that all fields use absolute positioning and do not allow\nfor relative positioning.",
        "fields": [
          {
            "name": "X",
            "type": "ns.Double",
            "notes": "Absolute position (X coordinate)."
          },
          {
            "name": "Y",
            "type": "ns.Double",
            "notes": "Absolute position (Y coordinate)."
          },
          {
            "name": "Z",
            "type": "ns.Double",
            "notes": "Absolute position (Z coordinate)."
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Absolute rotation on the vertical axis, in degrees."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Absolute rotation on the horizontal axis, in degrees."
          },
          {
            "name": "On Ground",
            "type": "ns.Boolean",
            "notes": "(This value does not seem to exist)"
          }
        ]
      },
      {
        "name": "Paddle Boat",
        "id": "0x22",
        "resource": "paddle_boat",
        "notes": "Used to visually update whether boat paddles are turning. The server will update the Boat entity metadata to match the values here.\n\nRight paddle turning is set to true when the left button or forward button is held, left paddle turning is set to true when the right button or forward button is held.",
        "fields": [
          {
            "name": "Left paddle turning",
            "type": "ns.Boolean",
            "notes": ""
          },
          {
            "name": "Right paddle turning",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Pick Item From Block",
        "id": "0x23",
        "resource": "pick_item_from_block",
        "notes": "Used for pick block functionality (middle click) on blocks to retrieve items from the inventory in survival or creative mode or create them in creative mode. See Controls#Pick_Block for more information.",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "The location of the block."
          },
          {
            "name": "Include Data",
            "type": "ns.Boolean",
            "notes": "Used to tell the server to include block data in the new stack, works only if in creative mode."
          }
        ]
      },
      {
        "name": "Pick Item From Entity",
        "id": "0x24",
        "resource": "pick_item_from_entity",
        "notes": "Used for pick block functionality (middle click) on entities to retrieve items from the inventory in survival or creative mode or create them in creative mode. See Controls#Pick_Block for more information.",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "The ID of the entity to pick."
          },
          {
            "name": "Include Data",
            "type": "ns.Boolean",
            "notes": "Unused by the vanilla server."
          }
        ]
      },
      {
        "name": "Ping Request (play)",
        "id": "0x25",
        "resource": "ping_request",
        "notes": "",
        "fields": [
          {
            "name": "Payload",
            "type": "ns.Long",
            "notes": "May be any number. vanilla clients use a system-dependent time value which is counted in milliseconds."
          }
        ]
      },
      {
        "name": "Place Recipe",
        "id": "0x26",
        "resource": "place_recipe",
        "notes": "This packet is sent when a player clicks a recipe in the crafting book that is craftable (white border).",
        "fields": [
          {
            "name": "Window ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Recipe ID",
            "type": "ns.VarInt",
            "notes": "ID of recipe previously defined in Recipe Book Add ."
          },
          {
            "name": "Make all",
            "type": "ns.Boolean",
            "notes": "Affects the amount of items processed; true if shift is down when clicked."
          }
        ]
      },
      {
        "name": "Player Abilities (serverbound)",
        "id": "0x27",
        "resource": "player_abilities",
        "notes": "The vanilla client sends this packet when the player starts/stops flying with the Flags parameter changed accordingly.",
        "fields": [
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "Bit mask. 0x02: is flying."
          }
        ]
      },
      {
        "name": "Player Action",
        "id": "0x28",
        "resource": "player_action",
        "notes": "Sent when the player mines a block. A vanilla server only accepts digging packets with coordinates within a 6-unit radius between the center of the block and the player's eyes.\n\nStatus can be one of seven values:",
        "fields": [
          {
            "name": "Status",
            "type": "ns.VarInt",
            "notes": "The action the player is taking against the block (see below)."
          },
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block position."
          },
          {
            "name": "Face",
            "type": "ns.Byte",
            "notes": "The face being hit (see below)."
          },
          {
            "name": "Sequence",
            "type": "ns.VarInt",
            "notes": "Block change sequence number (see #Acknowledge Block Change )."
          }
        ]
      },
      {
        "name": "Player Command",
        "id": "0x29",
        "resource": "player_command",
        "notes": "Sent by the client to indicate that it has performed certain actions: sprinting, exiting a bed, jumping with a horse, and opening a horse's inventory while riding it.\n\nAction ID can be one of the following values:",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": "Player ID (ignored by the vanilla server)"
          },
          {
            "name": "Action ID",
            "type": "ns.VarInt",
            "notes": "The ID of the action, see below."
          },
          {
            "name": "Jump Boost",
            "type": "ns.VarInt",
            "notes": "Only used by the \u201cstart jump with horse\u201d action, in which case it ranges from 0 to 100. In all other cases it is 0."
          }
        ]
      },
      {
        "name": "Player Input",
        "id": "0x2A",
        "resource": "player_input",
        "notes": "Sent whenever the player presses or releases certain keys. The flags correspond directly to the states of their corresponding keys\u2014the Sprint flag does not depend on whether the player is actually able to\nsprint at the moment, etc.\n\nUsed by the vanilla server for minecart controls, player inputs in the entity_properties predicate , and sneaking (sprinting is still controlled by Player Command ).\n\nThe flags are as follows:",
        "fields": [
          {
            "name": "Flags",
            "type": "ns.UnsignedByte",
            "notes": "Bit mask; see below"
          }
        ]
      },
      {
        "name": "Player Loaded",
        "id": "0x2B",
        "resource": "player_loaded",
        "notes": "Sent by the client to indicate that it is ready to start simulating the player. The vanilla client sends this when the \"Loading terrain...\" screen is closed . (But see the caveat below.)\n\nThe vanilla client skips ticking the player entity until the tick on which this packet is sent (the first tick will happen between this packet and the next Client Tick End ). Other\nentities and objects will still be ticked.\n\nOnce 60 ticks have elapsed since the last Login or Respawn packet, the vanilla client will start ticking the player and skip sending this packet completely , even after the usual conditions for it have been\nmet. This can happen even before the \"Start waiting for level chunks\" Game Event is received. The loading screen is not affected in any way by this timer (except indirectly by the player\nfalling into the void after ticking has started). Likewise, the vanilla server will assume that the client has loaded if it takes longer than 60 server ticks to send this packet. A more robust way to detect this\ncondition is to count the number of Client Tick End packets sent by the client. The first player tick will occur after 60 Client Tick End packets have been sent. To determine when\nthis counter should be restarted following a respawn, the Respawn packet can be sent in a bundle together with a Ping packet.",
        "fields": []
      },
      {
        "name": "Pong (play)",
        "id": "0x2C",
        "resource": "pong",
        "notes": "Response to the clientbound packet ( Ping ) with the same id.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.Int",
            "notes": "id is the same as the ping packet"
          }
        ]
      },
      {
        "name": "Change Recipe Book Settings",
        "id": "0x2D",
        "resource": "recipe_book_change_settings",
        "notes": "Replaces Recipe Book Data, type 1.",
        "fields": [
          {
            "name": "Book ID",
            "type": "ns.VarInt",
            "notes": "0: crafting, 1: furnace, 2: blast furnace, 3: smoker."
          },
          {
            "name": "Book Open",
            "type": "ns.Boolean",
            "notes": ""
          },
          {
            "name": "Filter Active",
            "type": "ns.Boolean",
            "notes": ""
          }
        ]
      },
      {
        "name": "Set Seen Recipe",
        "id": "0x2E",
        "resource": "recipe_book_seen_recipe",
        "notes": "Sent when recipe is first seen in recipe book. Replaces Recipe Book Data, type 0.",
        "fields": [
          {
            "name": "Recipe ID",
            "type": "ns.VarInt",
            "notes": "ID of recipe previously defined in Recipe Book Add."
          }
        ]
      },
      {
        "name": "Rename Item",
        "id": "0x2F",
        "resource": "rename_item",
        "notes": "Sent as a player is renaming an item in an anvil (each keypress in the anvil UI sends a new Rename Item packet). If the new name is empty, then the item loses its custom name (this is different from setting the\ncustom name to the normal name of the item). The item name may be no longer than 50 characters long, and if it is longer than that, then the rename is silently ignored.",
        "fields": [
          {
            "name": "Item name",
            "type": "ns.String",
            "notes": "The new name of the item."
          }
        ]
      },
      {
        "name": "Resource Pack Response (play)",
        "id": "0x30",
        "resource": "resource_pack",
        "notes": "Result can be one of the following values:",
        "fields": [
          {
            "name": "UUID",
            "type": "ns.UUID",
            "notes": "The unique identifier of the resource pack received in the Add Resource Pack (play) request."
          },
          {
            "name": "Result",
            "type": "ns.VarInt",
            "notes": "Result ID (see below)."
          }
        ]
      },
      {
        "name": "Seen Advancements",
        "id": "0x31",
        "resource": "seen_advancements",
        "notes": "",
        "fields": [
          {
            "name": "Action",
            "type": "ns.VarInt",
            "notes": "0: Opened tab, 1: Closed screen."
          },
          {
            "name": "Tab ID",
            "type": "ns.Optional[ns.Identifier]",
            "notes": "Only present if action is Opened tab."
          }
        ]
      },
      {
        "name": "Select Trade",
        "id": "0x32",
        "resource": "select_trade",
        "notes": "When a player selects a specific trade offered by a villager NPC.",
        "fields": [
          {
            "name": "Selected slot",
            "type": "ns.VarInt",
            "notes": "The selected slot in the players current (trading) inventory."
          }
        ]
      },
      {
        "name": "Set Beacon Effect",
        "id": "0x33",
        "resource": "set_beacon",
        "notes": "Changes the effect of the current beacon.",
        "fields": [
          {
            "name": "Primary Effect",
            "type": "ns.PrefixedOptional[ns.VarInt]",
            "notes": "A Potion ID ."
          },
          {
            "name": "Secondary Effect",
            "type": "ns.PrefixedOptional[ns.VarInt]",
            "notes": "A Potion ID ."
          }
        ]
      },
      {
        "name": "Set Held Item (serverbound)",
        "id": "0x34",
        "resource": "set_carried_item",
        "notes": "Sent when the player changes the slot selection.",
        "fields": [
          {
            "name": "Slot",
            "type": "ns.Short",
            "notes": "The slot which the player has selected (0\u20138)."
          }
        ]
      },
      {
        "name": "Program Command Block",
        "id": "0x35",
        "resource": "set_command_block",
        "notes": "",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": ""
          },
          {
            "name": "Command",
            "type": "ns.String",
            "notes": ""
          },
          {
            "name": "Mode",
            "type": "ns.VarInt",
            "notes": "0: chain, 1: repeating, 2: impulse."
          },
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "0x01: Track Output (if false, the output of the previous command will not be stored within the command block); 0x02: Is conditional; 0x04: Automatic."
          }
        ]
      },
      {
        "name": "Program Command Block Minecart",
        "id": "0x36",
        "resource": "set_command_minecart",
        "notes": "",
        "fields": [
          {
            "name": "Entity ID",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Command",
            "type": "ns.String",
            "notes": ""
          },
          {
            "name": "Track Output",
            "type": "ns.Boolean",
            "notes": "If false, the output of the previous command will not be stored within the command block."
          }
        ]
      },
      {
        "name": "Set Creative Mode Slot",
        "id": "0x37",
        "resource": "set_creative_mode_slot",
        "notes": "While the user is in the standard inventory (i.e., not a crafting bench) in Creative mode, the player will send this packet.\n\nClicking in the creative inventory menu is quite different from non-creative inventory management. Picking up an item with the mouse actually deletes the item from the server, and placing an item into a slot or\ndropping it out of the inventory actually tells the server to create the item from scratch. (This can be verified by clicking an item that you don't mind deleting, then severing the connection to the server; the\nitem will be nowhere to be found when you log back in.) As a result of this implementation strategy, the \"Destroy Item\" slot is just a client-side implementation detail that means \"I don't intend to recreate this\nitem.\". Additionally, the long listings of items (by category, etc.) are a client-side interface for choosing which item to create. Picking up an item from such listings sends no packets to the server; only when\nyou put it somewhere does it tell the server to create the item in that location.\n\nThis action can be described as \"set inventory slot\". Picking up an item sets the slot to item ID -1. Placing an item into an inventory slot sets the slot to the specified item. Dropping an item (by clicking\noutside the window) effectively sets slot -1 to the specified item, which causes the server to spawn the item entity, etc.. All other inventory slots are numbered the same as the non-creative inventory (including\nslots for the 2x2 crafting menu, even though they aren't visible in the vanilla client).",
        "fields": [
          {
            "name": "Slot",
            "type": "ns.Short",
            "notes": "Inventory slot."
          },
          {
            "name": "Clicked Item",
            "type": "ns.Slot",
            "notes": ""
          }
        ]
      },
      {
        "name": "Program Jigsaw Block",
        "id": "0x38",
        "resource": "set_jigsaw_block",
        "notes": "Sent when Done is pressed on the Jigsaw Block interface.",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block entity location"
          },
          {
            "name": "Name",
            "type": "ns.Identifier",
            "notes": ""
          },
          {
            "name": "Target",
            "type": "ns.Identifier",
            "notes": ""
          },
          {
            "name": "Pool",
            "type": "ns.Identifier",
            "notes": ""
          },
          {
            "name": "Final state",
            "type": "ns.String",
            "notes": "\"Turns into\" on the GUI, final_state in NBT."
          },
          {
            "name": "Joint type",
            "type": "ns.String",
            "notes": "rollable if the attached piece can be rotated, else aligned ."
          },
          {
            "name": "Selection priority",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Placement priority",
            "type": "ns.VarInt",
            "notes": ""
          }
        ]
      },
      {
        "name": "Program Structure Block",
        "id": "0x39",
        "resource": "set_structure_block",
        "notes": "Possible actions:",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block entity location."
          },
          {
            "name": "Action",
            "type": "ns.VarInt",
            "notes": "An additional action to perform beyond simply saving the given data; see below."
          },
          {
            "name": "Mode",
            "type": "ns.VarInt",
            "notes": "One of SAVE (0), LOAD (1), CORNER (2), DATA (3)."
          },
          {
            "name": "Name",
            "type": "ns.String",
            "notes": ""
          },
          {
            "name": "Offset X",
            "type": "ns.Byte",
            "notes": "Between -48 and 48."
          },
          {
            "name": "Offset Y",
            "type": "ns.Byte",
            "notes": "Between -48 and 48."
          },
          {
            "name": "Offset Z",
            "type": "ns.Byte",
            "notes": "Between -48 and 48."
          },
          {
            "name": "Size X",
            "type": "ns.Byte",
            "notes": "Between 0 and 48."
          },
          {
            "name": "Size Y",
            "type": "ns.Byte",
            "notes": "Between 0 and 48."
          },
          {
            "name": "Size Z",
            "type": "ns.Byte",
            "notes": "Between 0 and 48."
          },
          {
            "name": "Mirror",
            "type": "ns.VarInt",
            "notes": "One of NONE (0), LEFT_RIGHT (1), FRONT_BACK (2)."
          },
          {
            "name": "Rotation",
            "type": "ns.VarInt",
            "notes": "One of NONE (0), CLOCKWISE_90 (1), CLOCKWISE_180 (2), COUNTERCLOCKWISE_90 (3)."
          },
          {
            "name": "Metadata",
            "type": "ns.String",
            "notes": ""
          },
          {
            "name": "Integrity",
            "type": "ns.Float",
            "notes": "Between 0 and 1."
          },
          {
            "name": "Seed",
            "type": "ns.VarLong",
            "notes": ""
          },
          {
            "name": "Flags",
            "type": "ns.Byte",
            "notes": "0x01: Ignore entities; 0x02: Show air; 0x04: Show bounding box; 0x08: Strict placement."
          }
        ]
      },
      {
        "name": "Set Test Block",
        "id": "0x3A",
        "resource": "set_test_block",
        "notes": "Updates the value of the Test Block at the given position.",
        "fields": [
          {
            "name": "Position",
            "type": "ns.Position",
            "notes": ""
          },
          {
            "name": "Mode",
            "type": "ns.VarInt",
            "notes": "0: start, 1: log, 2: fail, 3: accept"
          },
          {
            "name": "Message",
            "type": "ns.String",
            "notes": ""
          }
        ]
      },
      {
        "name": "Update Sign",
        "id": "0x3B",
        "resource": "sign_update",
        "notes": "This message is sent from the client to the server when the \u201cDone\u201d button is pushed after placing a sign.\n\nThe server only accepts this packet after Open Sign Editor , otherwise this packet is silently ignored.",
        "fields": [
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block Coordinates."
          },
          {
            "name": "Is Front Text",
            "type": "ns.Boolean",
            "notes": "Whether the updated text is in front or on the back of the sign"
          },
          {
            "name": "Line 1",
            "type": "ns.String",
            "notes": "First line of text in the sign."
          },
          {
            "name": "Line 2",
            "type": "ns.String",
            "notes": "Second line of text in the sign."
          },
          {
            "name": "Line 3",
            "type": "ns.String",
            "notes": "Third line of text in the sign."
          },
          {
            "name": "Line 4",
            "type": "ns.String",
            "notes": "Fourth line of text in the sign."
          }
        ]
      },
      {
        "name": "Swing Arm",
        "id": "0x3C",
        "resource": "swing",
        "notes": "Sent when the player's arm swings.",
        "fields": [
          {
            "name": "Hand",
            "type": "ns.VarInt",
            "notes": "Hand used for the animation. 0: main hand, 1: off hand."
          }
        ]
      },
      {
        "name": "Teleport To Entity",
        "id": "0x3D",
        "resource": "teleport_to_entity",
        "notes": "Teleports the player to the given entity. The player must be in spectator mode.\n\nThe vanilla client only uses this to teleport to players, but it appears to accept any type of entity. The entity does not need to be in the same dimension as the player; if necessary, the player will be\nrespawned in the right world. If the given entity cannot be found (or isn't loaded), this packet will be ignored.",
        "fields": [
          {
            "name": "Target Player",
            "type": "ns.UUID",
            "notes": "UUID of the player to teleport to (can also be an entity UUID)."
          }
        ]
      },
      {
        "name": "Test Instance Block Action",
        "id": "0x3E",
        "resource": "test_instance_block_action",
        "notes": "Tries to perform an action the Test Instance Block at the given position.",
        "fields": [
          {
            "name": "Position",
            "type": "ns.Position",
            "notes": ""
          },
          {
            "name": "Action",
            "type": "ns.VarInt",
            "notes": "0: init, 1: query, 2: set, 3: reset, 4: save, 5: export, 6: run."
          },
          {
            "name": "Test",
            "type": "ns.PrefixedOptional[ns.VarInt]",
            "notes": "ID in the minecraft:test_instance_kind registry."
          },
          {
            "name": "Size X",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Size Y",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Size Z",
            "type": "ns.VarInt",
            "notes": ""
          },
          {
            "name": "Rotation",
            "type": "ns.VarInt",
            "notes": "0: none, 1: clockwise 90\u00b0, 2: clockwise 180\u00b0, 3: counter-clockwise 90\u00b0."
          },
          {
            "name": "Ignore Entities",
            "type": "ns.Boolean",
            "notes": ""
          },
          {
            "name": "Error Message",
            "type": "ns.PrefixedOptional[ns.TextComponent]",
            "notes": ""
          }
        ]
      },
      {
        "name": "Use Item On",
        "id": "0x3F",
        "resource": "use_item_on",
        "notes": "Upon placing a block, this packet is sent once.\n\nThe Cursor Position X/Y/Z fields (also known as in-block coordinates) are calculated using raytracing. The unit corresponds to sixteen pixels in the default resource pack. For example, let's say a slab is being\nplaced against the south face of a full block. The Cursor Position X will be higher if the player was pointing near the right (east) edge of the face, lower if pointing near the left. The Cursor Position Y will\nbe used to determine whether it will appear as a bottom slab (values 0.0\u20130.5) or as a top slab (values 0.5-1.0). The Cursor Position Z should be 1.0 since the player was looking at the southernmost part of the\nblock.\n\nInside block is true when a player's head (specifically eyes) are inside of a block's collision. In 1.13 and later versions, collision is rather complicated and individual blocks can have multiple collision\nboxes. For instance, a ring of vines has a non-colliding hole in the middle. This value is only true when the player is directly in the box. In practice, though, this value is only used by scaffolding to place in\nfront of the player when sneaking inside of it (other blocks will place behind when you intersect with them -- try with glass for instance).",
        "fields": [
          {
            "name": "Hand",
            "type": "ns.VarInt",
            "notes": "The hand from which the block is placed; 0: main hand, 1: off hand."
          },
          {
            "name": "Location",
            "type": "ns.Position",
            "notes": "Block position."
          },
          {
            "name": "Face",
            "type": "ns.VarInt",
            "notes": "The face on which the block is placed (as documented at Player Action )."
          },
          {
            "name": "Cursor Position X",
            "type": "ns.Float",
            "notes": "The position of the crosshair on the block, from 0 to 1 increasing from west to east."
          },
          {
            "name": "Cursor Position Y",
            "type": "ns.Float",
            "notes": "The position of the crosshair on the block, from 0 to 1 increasing from bottom to top."
          },
          {
            "name": "Cursor Position Z",
            "type": "ns.Float",
            "notes": "The position of the crosshair on the block, from 0 to 1 increasing from north to south."
          },
          {
            "name": "Inside block",
            "type": "ns.Boolean",
            "notes": "True when the player's head is inside of a block."
          },
          {
            "name": "World Border Hit",
            "type": "ns.Boolean",
            "notes": "Seems to always be false, even when interacting with blocks around or outside the world border, or while the player is outside the border."
          },
          {
            "name": "Sequence",
            "type": "ns.VarInt",
            "notes": "Block change sequence number (see #Acknowledge Block Change )."
          }
        ]
      },
      {
        "name": "Use Item",
        "id": "0x40",
        "resource": "use_item",
        "notes": "Sent when pressing the Use Item key (default: right click) with an item in hand.\n\nThe player's rotation is permanently updated according to the Yaw and Pitch fields before performing the action, unless there is no item in the specified hand.",
        "fields": [
          {
            "name": "Hand",
            "type": "ns.VarInt",
            "notes": "Hand used for the animation. 0: main hand, 1: off hand."
          },
          {
            "name": "Sequence",
            "type": "ns.VarInt",
            "notes": "Block change sequence number (see #Acknowledge Block Change )."
          },
          {
            "name": "Yaw",
            "type": "ns.Float",
            "notes": "Player head rotation around the Y-Axis."
          },
          {
            "name": "Pitch",
            "type": "ns.Float",
            "notes": "Player head rotation around the X-Axis."
          }
        ]
      },
      {
        "name": "Custom Click Action (play)",
        "id": "0x41",
        "resource": "custom_click_action",
        "notes": "Sent when the client clicks a Text Component with the minecraft:custom click action. This is meant as an alternative to running a command, but will not have any\neffect on vanilla servers.",
        "fields": [
          {
            "name": "ID",
            "type": "ns.Identifier",
            "notes": "The identifier for the click action."
          },
          {
            "name": "Payload",
            "type": "ns.NBT",
            "notes": "The data to send with the click action. May be a TAG_END (0)."
          }
        ]
      }
    ]
  },
  "status": {
    "clientbound": [
      {
        "name": "Status Response",
        "id": "0x00",
        "resource": "status_response",
        "notes": "",
        "fields": [
          {
            "name": "JSON Response",
            "type": "ns.String",
            "notes": "See Server List Ping#Status Response ; as with all strings this is prefixed by its length as a VarInt ."
          }
        ]
      },
      {
        "name": "Pong Response (status)",
        "id": "0x01",
        "resource": "pong_response",
        "notes": "",
        "fields": [
          {
            "name": "Timestamp",
            "type": "ns.Long",
            "notes": "Should match the one sent by the client."
          }
        ]
      }
    ],
    "serverbound": [
      {
        "name": "Status Request",
        "id": "0x00",
        "resource": "status_request",
        "notes": "The status can only be requested once immediately after the handshake, before any ping. The server won't respond otherwise.",
        "fields": []
      },
      {
        "name": "Ping Request (status)",
        "id": "0x01",
        "resource": "ping_request",
        "notes": "",
        "fields": [
          {
            "name": "Timestamp",
            "type": "ns.Long",
            "notes": "May be any number, but vanilla clients will always use the timestamp in milliseconds."
          }
        ]
      }
    ]
  }
}